{
  "title": "Wing IDE",
  "summary": "The Wing Python IDE is a family of integrated development environments (IDEs) from Wingware created specifically for the Python programming language with support for editing, testing, debugging, inspecting/browsing, and error-checking Python code.\nThere are three versions of the IDE, each one focused on different types of users:\n\nWing Pro – a full-featured commercial version, for professional programmers;\nWing Personal – a free version that omits many of these features, for students and hobbyist",
  "content": "---\ntitle: Wing IDE\nurl: https://en.wikipedia.org/wiki/Wing_IDE\nlanguage: en\ncategories: [\"Category:All articles needing additional references\", \"Category:All articles with a promotional tone\", \"Category:All articles with unsourced statements\", \"Category:Articles needing additional references from January 2021\", \"Category:Articles with a promotional tone from May 2020\", \"Category:Articles with multiple maintenance issues\", \"Category:Articles with unsourced statements from July 2024\", \"Category:CS1 maint: numeric names: authors list\", \"Category:Integrated development environments\", \"Category:Official website different in Wikidata and Wikipedia\", \"Category:Pages with broken reference names\", \"Category:Pages with reference errors\", \"Category:Python (programming language) development tools\"]\nreferences: 0\nlast_modified: 2024-12-13T13:50:34Z\n---\n\n# Wing IDE\n\n## Summary\n\nThe Wing Python IDE is a family of integrated development environments (IDEs) from Wingware created specifically for the Python programming language with support for editing, testing, debugging, inspecting/browsing, and error-checking Python code.\nThere are three versions of the IDE, each one focused on different types of users:\n\nWing Pro – a full-featured commercial version, for professional programmers;\nWing Personal – a free version that omits many of these features, for students and hobbyist\n\n## Full Content\n\nThe Wing Python IDE is a family of integrated development environments (IDEs) from Wingware created specifically for the Python programming language with support for editing, testing, debugging, inspecting/browsing, and error-checking Python code.\nThere are three versions of the IDE, each one focused on different types of users:\n\nWing Pro – a full-featured commercial version, for professional programmers;\nWing Personal – a free version that omits many of these features, for students and hobbyists; and\nWing 101 – a very simplified free version for teaching beginner programmers.\nWing Pro provides AI-assisted development, local and remote debugging, editing (with multiple key bindings, auto-completion, auto-editing, and multi-selection), source browser and code navigation, code refactoring, import management, error checking, auto-reformatting, unit testing with code coverage, version control, project management, Python environment and package management, single and multi-file search, fine-grained customization, support for Docker and LXC containers, assistance for working with third-party frameworks and tools (such as Django, Flask, Matplotlib, Pandas, Blender, Maya, Unreal Engine, PyQt, wxPython, and others) through Python scripting, and comprehensive documentation.\nWing Personal and Wing 101 omit many of these features. All three versions of Wing support installation on Windows, Mac OS X, and Intel and ARM Linux.\nFree licenses for Wing Pro are available for educational users and unpaid open-source software developers.\n\nAI Assisted Development\nThe AI assistant, available in Wing Pro only, can be used to write new code, refactor or redesign existing code, and inspect and understand code. Using the assistant, users may:\n\nRefactor or rewrite selected code according to the user's written instructions;\nInsert new AI-written code at the current editor insertion point according to a written description; and\nChat with an AI assistant to ask about some code or iterate towards a solution for a bug fix or extension, without changing any of the existing source code directly.\n\nDebugger\nThe debugger can be used to locate and fix bugs, as well as a way to write new code interactively in the live runtime state for which the code is being designed. The level of the debugging support depends on the version used, with each tier of service giving the user more features with which they can debug.\nWing 101 supports:\n\nDebug code launched from the IDE (as a file or module with 'python -m');\nInteractive debugging from (and within) the integrated Python Shell;\nException and traceback reporting;\nView stack, local/global variables, and return values;\nThe data frame and array viewer;\nIntegrated Debug I/O tool with configurable text encoding;\nOptional native console I/O; and\nSteps over importlib frames.\nWing Personal adds:\n\nMulti-threaded debugging;\nDebug code launched outside of the IDE, including code running under a web framework or embedded instance of Python;\nDebug value tooltips;\nAlter debug data values; and\nDefine named entry points and debug launch configurations.\nWing Pro adds:\n\nAn interactive Debug Probe command line for inspecting the current debug frame, with auto-completion, syntax highlighting, goto-definition, call tips, and documentation links;\nMulti-process and automatic child process debugging;\nLaunching remote debug processes from the IDE;\nConditional and ignore-counted breakpoints;\nEnable/disable breakpoints;\nMoving the debug program counter;\nDebug unit tests;\nTutorials and extra features for Django, Flask, Jupyter, matplotlib, web2py, Plone, Zope, Docker, AWS, Vagrant, Raspberry Pi, Windows Subsystem for Linux, Blender, Unreal Engine, Nuke, and others;\nThe ability to press Shift-Space to view the value of all symbols in the editor;\nRecursive debugging of code invoked in the context of another debug stack frame;\nConvenient Restart Debugging tool;\nTracking values by reference;\nEvaluating expressions;\nBreakpoint manager;\nDebug process attach/detach;\nInspecting sys.modules; and\nMarking a range of code in the editor for quick reevaluation in Python Shell or Debug Probe.\n\nCode intelligence\nThe code intelligence features speed up editing, facilitated navigation through code, and inspected code for errors. These features rely both on static analysis of Python code found in the project and on the Python Path and runtime analysis of code whenever the debugger is active or the code is active in the integrated Python Shell. The features available to the user depend on the version being used.\nWing 101 provides:\n\nAn auto-completer that offers completions in Python code and in the integrated Python shell (this feature is disabled by default in Wing 101 but can be enabled in preferences)\nSource index menus in each editor provide a handy index into the source code\nGoto-definition\nAuto-indent\nPEP8, Black, YAPF, and Ruff reformatting\nSyntax and indentation error indicators\nConvert indents and end-of-line characters on paste\nUnderstands PEP 484 and 526 type hinting\nWing Personal adds:\n\nFind Symbol: keyboard-driven goto-definition within the current file or any project file\nAuto-completion in non-Python files\nIndentation analysis and conversion\nSource Assistant: provides context-appropriate call signature and documentation with the rendering of PEP287 docstrings\nClass browser for single files or whole project\nWing Pro adds:\n\nCode Warnings tool\nPylint, pep8 checker, mypy, flake8, and Ruff integrations\nModule browser\nSource Assistant includes standard library documentation links\nFind all points of use of a symbol, filtering out different but like-named symbols\nFind the symbol by name, in the current file or all project files\nRefactoring: rename or move a symbol and update points of use, extract a range of code to a new function or method, introduce a variable, and manage imports\n\nProject Management\nWing's project manager allows developers to set up, manage, and share development configurations. It supports creating projects for existing or new source directories, with optional code retrieval from version control repositories. The IDE facilitates easy creation and configuration of Python environments using virtualenv, pip, Poetry, pipenv, or conda, either locally, on a remote host, or with containers managed by Docker or LXC/LXD.\n\nVersion control\nWing Pro integrates with various version control systems, including Git, Mercurial, Perforce, Subversion, and CVS. It offers features such as status checking, committing, logging, blame/praise/annotate, reverting, resolving, and repository push/pull operations. A difference and merge tool is also available for comparing files or directories and reviewing uncommitted changes.\n\nPackage Management\nWing Pro includes an integrated package management tool that simplifies inspecting, adding, removing, and upgrading Python packages in the development environment. It supports pip, Poetry, pipenv, and conda environments.\n\nUnit testing\nWing Pro supports unit testing by allowing running and debugging of unit tests written for the unittest, pytest, doctest, nose, and Django testing frameworks. It optionally tracks code coverage, to indicate how well code is being tested and to re-run only tests affected by changes to code.\n\nRemote development\nWing Pro also supports secure development on remote hosts, virtual machines, or containers hosted by Docker, Docker Compose, or LXC/LXD. Code on the remote system may be edited, debugged, tested, and managed from the IDE, as for locally stored files. Remote development also supports externally launched debugging.\n\nOther features\nOther features present in all versions include:\n\nEditor emulates vim, emacs, Visual Studio, Eclipse, XCode, Matlab, and Brief\nSyntax highlighting for most programming languages, including Python, Django (web framework) templates, CoffeeScript, HTML/XML, CSS, JavaScript, C/C++, and about 70 others\nIntegrated Python shell with auto-completion, syntax highlighting\nSearch within the current file\nConfigurable colour palettes and user interface layout\nExtensive documentation, How-Tos, and tutorial\nGerman, French, and Russian UI localization\nWing Personal adds:\n\nMulti-select to simultaneously edit multiple parts of a file\nDefine custom key bindings\nCreate projects for different development tasks\nQuickly open project files by name fragment\nAdd, delete, rename, and move files in the project\nCreate new projects using existing virtualenv, Anaconda env, pipenv, or Poetry environments\nProject-wide and multi-file search\nRegex and wildcard search\nSearch documentation\nWing Pro adds:\n\nGoto-definition, call tips, and documentation links in the integrated Python shell\nPython environment creation with virtualenv, pipenv, conda, Poetry, and Docker\nPython package management with pip, pipenv, conda, and Poetry\nFile add, delete, rename, and move operations track to the active revision control systems\nSet and traverse bookmarks\nCode snippets with recursive inline data entry\nPerspectives for naming custom user interface layouts\nExecute external commands in the integrated OS Commands tool\nExtend the IDE's functionality with Python scripts\n\nHistory\nThe first public version of Wing was released on the 7th of September of 2000, as 1.0 beta, only for Linux.\nThe first stable version was v1.0 for Linux, released on the 1st of December of 2000.\nAs of March 29, 2004, Archaeopteryx Software Inc began doing business as Wingware.\nWing version 4.x and earlier were based on GTK2 and the OS X version required X11. Wing 5 changed to Qt4 via PySide and no longer uses X11 on OS X. Wing 6 moved to Qt5 with PyQt5.  Wing 10 uses PyQt6.5.\n\nSee also\nList of integrated development environments for Python\n\nReferences\nExternal links\nOfficial website\n",
  "categories": [
    "Category:All articles needing additional references",
    "Category:All articles with a promotional tone",
    "Category:All articles with unsourced statements",
    "Category:Articles needing additional references from January 2021",
    "Category:Articles with a promotional tone from May 2020",
    "Category:Articles with multiple maintenance issues",
    "Category:Articles with unsourced statements from July 2024",
    "Category:CS1 maint: numeric names: authors list",
    "Category:Integrated development environments",
    "Category:Official website different in Wikidata and Wikipedia",
    "Category:Pages with broken reference names",
    "Category:Pages with reference errors",
    "Category:Python (programming language) development tools"
  ],
  "archived_date": "20241221_182958",
  "source_url": "https://en.wikipedia.org/wiki/Wing_IDE"
}