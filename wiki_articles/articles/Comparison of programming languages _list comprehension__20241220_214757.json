{
  "title": "Comparison of programming languages (list comprehension)",
  "summary": "List comprehension is a syntactic construct available in some programming languages for creating a list based on existing lists.  It follows the form of the mathematical set-builder notation (set comprehension) as distinct from the use of map and filter functions.",
  "content": "---\ntitle: Comparison of programming languages (list comprehension)\nurl: https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(list_comprehension)\nlanguage: en\ncategories: [\"Category:All articles needing additional references\", \"Category:Articles needing additional references from February 2009\", \"Category:Articles with example C Sharp code\", \"Category:Articles with example Haskell code\", \"Category:Articles with example Julia code\", \"Category:Articles with example Lisp (programming language) code\", \"Category:Articles with example Python (programming language) code\", \"Category:Articles with example Racket code\", \"Category:Articles with hatnote templates targeting a nonexistent page\", \"Category:Programming language comparisons\"]\nreferences: 0\nlast_modified: 2024-11-28T10:33:37Z\n---\n\n# Comparison of programming languages (list comprehension)\n\n## Summary\n\nList comprehension is a syntactic construct available in some programming languages for creating a list based on existing lists.  It follows the form of the mathematical set-builder notation (set comprehension) as distinct from the use of map and filter functions.\n\n## Full Content\n\nList comprehension is a syntactic construct available in some programming languages for creating a list based on existing lists.  It follows the form of the mathematical set-builder notation (set comprehension) as distinct from the use of map and filter functions.\n\nExamples of list comprehension\nBoo\nList with all the doubles from 0 to 10 (exclusive)\n\nList with the names of the customers based in Rio de Janeiro\n\nC#\nThe previous code is syntactic sugar for the following code written using lambda expressions:\n\nCeylon\nFiltering numbers divisible by 3:\n\nMultiple \"generators\":\n\nClojure\nAn infinite lazy sequence:\n\nA list comprehension using multiple generators:\n\nCoffeeScript\nCommon Lisp\nList comprehensions can be expressed with the loop macro's collect keyword. Conditionals are expressed with if, as follows:\n\nCobra\nList the names of customers:\n\nList the customers with balances:\n\nList the names of customers with balances:\n\nThe general forms:\n\nNote that by putting the condition and expression after the variable name and enumerable object, editors and IDEs can provide autocompletion on the members of the variable.\n\nDart\nElixir\nErlang\nF#\nLazily-evaluated sequences:\n\nOr, for floating point values\n\nLists and arrays:\n\nList comprehensions are the part of a greater family of language constructs called computation expressions.\n\nHaskell\nAn example of a list comprehension using multiple generators:\n\nIo\nBy using Range object, Io language can create list as easy as in other languages:\n\nISLISP\nList comprehensions can be expressed with the for special form. Conditionals are expressed with if, as follows:\n\nJulia\nJulia supports comprehensions using the syntax:\n\nand multidimensional comprehensions like:\n\nIt is also possible to add a condition:\n\nAnd just changing square brackets to the round one, we get a generator:\n\nMythryl\ns = [ 2*i for i in 1..100 where i*i > 3 ];\n\nMultiple generators:\n\n pyth = [ (x,y,z) for x in 1..20 for y in x..20 for z in y..20 where x*x + y*y == z*z ];\n\nNemerle\nNim\nNim has built-in seq, set, table and object comprehensions on the sugar standard library module:\n\nThe comprehension is implemented as a macro that is expanded at compile time, \nyou can see the expanded code using the expandMacro compiler option:\n\nThe comprehensions can be nested and multi-line:\n\nOCaml\nOCaml supports List comprehension through OCaml Batteries.\n\nPerl\nArray with all the doubles from 1 to 9 inclusive:\n\nArray with the names of the customers based in Rio de Janeiro (from array of hashes):\n\nFiltering numbers divisible by 3:\n\nPowerShell\nwhich is short-hand notation of:\n\nPython\nPython uses the following syntax to express list comprehensions over finite lists:\n\nA generator expression may be used in Python versions >= 2.4 which gives lazy evaluation over its input, and can be used with generators to iterate over 'infinite' input such as the count generator function which returns successive integers:\n\n(Subsequent use of the generator expression will determine when to stop generating values).\n\nR\nRacket\nAn example with multiple generators:\n\nRaku\nScala\nUsing the for-comprehension:\n\nScheme\nList comprehensions are supported in Scheme through the use of the SRFI-42 library.\n\nAn example of a list comprehension using multiple generators:\n\nSETL\nSmalltalk\nVisual Prolog\nS = [ 2*X || X = list::getMember_nd(L), X*X > 3 ]\n\nReferences\nExternal links\nComparison of list comprehensions on rosettacode.org\n",
  "categories": [
    "Category:All articles needing additional references",
    "Category:Articles needing additional references from February 2009",
    "Category:Articles with example C Sharp code",
    "Category:Articles with example Haskell code",
    "Category:Articles with example Julia code",
    "Category:Articles with example Lisp (programming language) code",
    "Category:Articles with example Python (programming language) code",
    "Category:Articles with example Racket code",
    "Category:Articles with hatnote templates targeting a nonexistent page",
    "Category:Programming language comparisons"
  ],
  "archived_date": "20241220_214757",
  "source_url": "https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(list_comprehension)"
}