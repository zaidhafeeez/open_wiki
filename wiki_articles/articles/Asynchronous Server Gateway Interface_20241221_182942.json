{
  "title": "Asynchronous Server Gateway Interface",
  "summary": "The Asynchronous Server Gateway Interface (ASGI) is a calling convention for web servers to forward requests to asynchronous-capable Python frameworks, and applications. It is built as a successor to the Web Server Gateway Interface (WSGI).\nWhere WSGI provided a standard for synchronous Python application, ASGI provides one for both asynchronous and synchronous applications, with a WSGI backwards-compatibility implementation and multiple servers and application frameworks.",
  "content": "---\ntitle: Asynchronous Server Gateway Interface\nurl: https://en.wikipedia.org/wiki/Asynchronous_Server_Gateway_Interface\nlanguage: en\ncategories: [\"Category:All articles with topics of unclear notability\", \"Category:Articles with example Python (programming language) code\", \"Category:Articles with short description\", \"Category:Articles with topics of unclear notability from December 2023\", \"Category:Free software programmed in Python\", \"Category:Python (programming language)\", \"Category:Short description matches Wikidata\"]\nreferences: 0\nlast_modified: 2024-12-19T15:02:40Z\n---\n\n# Asynchronous Server Gateway Interface\n\n## Summary\n\nThe Asynchronous Server Gateway Interface (ASGI) is a calling convention for web servers to forward requests to asynchronous-capable Python frameworks, and applications. It is built as a successor to the Web Server Gateway Interface (WSGI).\nWhere WSGI provided a standard for synchronous Python application, ASGI provides one for both asynchronous and synchronous applications, with a WSGI backwards-compatibility implementation and multiple servers and application frameworks.\n\n## Full Content\n\nThe Asynchronous Server Gateway Interface (ASGI) is a calling convention for web servers to forward requests to asynchronous-capable Python frameworks, and applications. It is built as a successor to the Web Server Gateway Interface (WSGI).\nWhere WSGI provided a standard for synchronous Python application, ASGI provides one for both asynchronous and synchronous applications, with a WSGI backwards-compatibility implementation and multiple servers and application frameworks.\n\nExample\nAn ASGI-compatible \"Hello, World!\" application written in Python:Where:\nLine 1 defines an asynchronous function named application, which takes three parameters (unlike in WSGI which takes only two), scope, receive and send.\nscope is a dict containing details about current connection, like the protocol, headers, etc.\nreceive and send are asynchronous callables which let the application receive and send messages from/to the client.\nLine 2 receives an incoming event, for example, HTTP request or WebSocket message. The await keyword is used because the operation is asynchronous.\nLine 4 asynchronously sends a response back to the client. In this case, it is a WebSocket communication.\n\nWeb Server Gateway Interface (WSGI) compatibility\nASGI is also designed to be a superset of WSGI, and there's a defined way of translating between the two, allowing WSGI applications to be run inside ASGI servers through a translation wrapper (provided in the asgiref library). A threadpool can be used to run the synchronous WSGI applications away from the async event loop.\n\nSee also\nComparison of web frameworks\nFastCGI\nPython (programming language)\n Web Server Gateway Interface (WSGI)\n\nReferences\nExternal links\nAsynchronous Server Gateway Interface Documentation\nAsynchronous Server Gateway Interface Specification\n",
  "categories": [
    "Category:All articles with topics of unclear notability",
    "Category:Articles with example Python (programming language) code",
    "Category:Articles with short description",
    "Category:Articles with topics of unclear notability from December 2023",
    "Category:Free software programmed in Python",
    "Category:Python (programming language)",
    "Category:Short description matches Wikidata"
  ],
  "archived_date": "20241221_182942",
  "source_url": "https://en.wikipedia.org/wiki/Asynchronous_Server_Gateway_Interface"
}