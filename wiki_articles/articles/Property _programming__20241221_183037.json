{
  "title": "Property (programming)",
  "summary": "A property, in some object-oriented programming languages, is a special sort of class member, intermediate in functionality between a field (or data member) and a method. The syntax for reading and writing of properties is like for fields, but property reads and writes are (usually) translated to 'getter' and 'setter' method calls. The field-like syntax is easier to read and write than many method calls, yet the interposition of method calls \"under the hood\" allows for data validation, active up",
  "content": "---\ntitle: Property (programming)\nurl: https://en.wikipedia.org/wiki/Property_(programming)\nlanguage: en\ncategories: [\"Category:All Wikipedia articles needing clarification\", \"Category:All articles needing additional references\", \"Category:All articles with unsourced statements\", \"Category:Articles needing additional references from January 2022\", \"Category:Articles needing additional references from October 2016\", \"Category:Articles with example C++ code\", \"Category:Articles with example C Sharp code\", \"Category:Articles with example D code\", \"Category:Articles with example JavaScript code\", \"Category:Articles with example PHP code\", \"Category:Articles with example Python (programming language) code\", \"Category:Articles with example Ruby code\", \"Category:Articles with short description\", \"Category:Articles with unsourced statements from March 2020\", \"Category:Object-oriented programming\", \"Category:Short description is different from Wikidata\", \"Category:Wikipedia articles needing clarification from October 2016\"]\nreferences: 0\nlast_modified: 2024-12-20T21:32:06Z\n---\n\n# Property (programming)\n\n## Summary\n\nA property, in some object-oriented programming languages, is a special sort of class member, intermediate in functionality between a field (or data member) and a method. The syntax for reading and writing of properties is like for fields, but property reads and writes are (usually) translated to 'getter' and 'setter' method calls. The field-like syntax is easier to read and write than many method calls, yet the interposition of method calls \"under the hood\" allows for data validation, active up\n\n## Full Content\n\nA property, in some object-oriented programming languages, is a special sort of class member, intermediate in functionality between a field (or data member) and a method. The syntax for reading and writing of properties is like for fields, but property reads and writes are (usually) translated to 'getter' and 'setter' method calls. The field-like syntax is easier to read and write than many method calls, yet the interposition of method calls \"under the hood\" allows for data validation, active updating (e.g., of GUI elements), or implementation of what may be called \"read-only fields\".\n\nSupport in languages\nProgramming languages that support properties include ActionScript 3, C#, D, Delphi/Free Pascal, eC, F#, Kotlin, JavaScript, Objective-C 2.0, Python, Scala, Swift, Lua, and Visual Basic.\nSome object-oriented languages, such as Java and C++, do not support properties, requiring the programmer to define a pair of accessor and mutator methods instead.\nOberon-2 provides an alternative mechanism using object variable visibility flags.\nOther languages designed for the Java Virtual Machine, such as Groovy, natively support properties.\nWhile C++ does not have first class properties, they can be emulated with operator overloading.\nAlso note that some C++ compilers support first class properties as language extensions.\n\nIn Microsoft Visual Studio, GCC, and llvm/clang, the __declspec(property) creates properties similar to C#.\nBorland C++ and Borland/CodeGear/Embarcadero C++Builder use the __property keyword.\nIn many object oriented languages properties are implemented as a pair of accessor/mutator methods, but accessed using the same syntax as for public fields. Omitting a method from the pair yields a read-only or an uncommon write-only property.\nIn some languages with no built-in support for properties, a similar construct can be implemented as a single method that either returns or changes the underlying data, depending on the context of its invocation. Such techniques are used e.g. in Perl. \nSome languages (Ruby, Smalltalk) achieve property-like syntax using normal methods, sometimes with a limited amount of syntactic sugar.\n\nSyntax variants\nSome languages follow well-established syntax conventions for formally specifying and utilizing properties and methods.\nAmong these conventions:\n\nDot notation\nBracket notation\n\nDot notation\nThe following example demonstrates dot notation in JavaScript.\n\nBracket notation\nThe following example demonstrates bracket notation in JavaScript.\n\nExample syntax\nC#\nRecent C# versions also allow \"auto-implemented properties\" where the backing field for the property is generated by the compiler during compilation. This means that the property must have a setter. However, it can be private.\n\nC++\nC++ does not have first class properties, but there exist several ways to emulate properties to a limited degree. Two of which follow:\n\nUsing Standard C++\nAlso see Stack Overflow for a more detailed example.\n\nC++, Microsoft, GCC, LLVM/clang and C++Builder-specific\nAn example taken from the MSDN documentation page.\n\nD\nIn D version 2, each property accessor or mutator must be marked with @property:\n\nDelphi/Free Pascal\neC\nF#\nJavaScript\nActionScript 3.0\nObjective-C 2.0\nThe above example could be used in an arbitrary method like this:\n\nPHP\nPython\nProperties only work correctly for new-style classes (classes that have object as a superclass), and are only available in Python 2.2 and newer (see the relevant section of the tutorial Unifying types and classes in Python 2.2). Python 2.6 added a new syntax involving decorators for defining properties.\n\nRuby\nRuby also provides automatic getter/setter synthesizers defined as instance methods of Class.\n\nVisual Basic\nVisual Basic (.NET 2003â€“2010)\nVisual Basic (only .NET 2010)\nVisual Basic 6\nSee also\nAttribute (computing)\nBound property\nField (computer science)\nIndexer (programming)\nMethod (computer programming)\nMutator method\nUniform access principle\n\n\n== References ==\n",
  "categories": [
    "Category:All Wikipedia articles needing clarification",
    "Category:All articles needing additional references",
    "Category:All articles with unsourced statements",
    "Category:Articles needing additional references from January 2022",
    "Category:Articles needing additional references from October 2016",
    "Category:Articles with example C++ code",
    "Category:Articles with example C Sharp code",
    "Category:Articles with example D code",
    "Category:Articles with example JavaScript code",
    "Category:Articles with example PHP code",
    "Category:Articles with example Python (programming language) code",
    "Category:Articles with example Ruby code",
    "Category:Articles with short description",
    "Category:Articles with unsourced statements from March 2020",
    "Category:Object-oriented programming",
    "Category:Short description is different from Wikidata",
    "Category:Wikipedia articles needing clarification from October 2016"
  ],
  "archived_date": "20241221_183037",
  "source_url": "https://en.wikipedia.org/wiki/Property_(programming)"
}