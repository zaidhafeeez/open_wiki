{
  "title": "Elementary comparison testing",
  "summary": "Elementary comparison testing (ECT) is a white-box, control-flow, test-design methodology used in software development. The purpose of ECT is to enable detailed testing of complex software. Software code or pseudocode is tested to assess the proper handling of all decision outcomes. As with multiple-condition coverage and basis path testing, coverage of all independent and isolated conditions is accomplished through modified condition/decision coverage (MC/DC). Isolated conditions are aggregated",
  "content": "---\ntitle: Elementary comparison testing\nurl: https://en.wikipedia.org/wiki/Elementary_comparison_testing\nlanguage: en\ncategories: [\"Category:Articles with example Python (programming language) code\", \"Category:Articles with example pseudocode\", \"Category:Pages that use a deprecated format of the math tags\", \"Category:Software testing\"]\nreferences: 0\nlast_modified: 2024-11-16T23:52:09Z\n---\n\n# Elementary comparison testing\n\n## Summary\n\nElementary comparison testing (ECT) is a white-box, control-flow, test-design methodology used in software development. The purpose of ECT is to enable detailed testing of complex software. Software code or pseudocode is tested to assess the proper handling of all decision outcomes. As with multiple-condition coverage and basis path testing, coverage of all independent and isolated conditions is accomplished through modified condition/decision coverage (MC/DC). Isolated conditions are aggregated\n\n## Full Content\n\nElementary comparison testing (ECT) is a white-box, control-flow, test-design methodology used in software development. The purpose of ECT is to enable detailed testing of complex software. Software code or pseudocode is tested to assess the proper handling of all decision outcomes. As with multiple-condition coverage and basis path testing, coverage of all independent and isolated conditions is accomplished through modified condition/decision coverage (MC/DC). Isolated conditions are aggregated into connected situations creating formal test cases. The independence of a condition is shown by changing the condition value in isolation. Each relevant condition value is covered by test cases.\n\nTest case\nA test case consists of a logical path through one or many decisions from start to end of a process. Contradictory situations are deduced from the test case matrix and excluded. The MC/DC approach isolates every condition, neglecting all possible subpath combinations and path coverage.\n\n  \n    \n      \n        T\n        =\n        n\n        +\n        1\n      \n    \n    {\\displaystyle T=n+1}\n  \n\nwhere\n\nT is the number of test cases per decision and\nn the number of conditions.\nThe decision \n  \n    \n      \n        \n          d\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle d_{i}}\n  \n consists of a combination of elementary conditions\n\n  \n    \n      \n        \n          \n            \n              \n                Σ\n              \n              \n                \n                =\n                {\n                0\n                ,\n                1\n                }\n              \n            \n            \n              \n                C\n              \n              \n                \n                =\n                {\n                \n                  c\n                  \n                    0\n                  \n                \n                ,\n                \n                  c\n                  \n                    1\n                  \n                \n                ,\n                \n                  c\n                  \n                    2\n                  \n                \n                ,\n                \n                  c\n                  \n                    3\n                  \n                \n                ,\n                .\n                .\n                .\n                ,\n                \n                  c\n                  \n                    n\n                  \n                \n                }\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}\\Sigma &=\\{0,1\\}\\\\C&=\\{c_{0},c_{1},c_{2},c_{3},...,c_{n}\\}\\end{aligned}}}\n  \n\n  \n    \n      \n        ϵ\n        :\n        C\n        →\n        Σ\n        ×\n        C\n      \n    \n    {\\displaystyle \\epsilon :C\\to \\Sigma \\times C}\n  \n\n  \n    \n      \n        D\n        ⊆\n        \n          C\n          \n            ∗\n          \n        \n        \n        ;\n        \n        \n          d\n          \n            i\n          \n        \n        ∈\n        D\n      \n    \n    {\\displaystyle D\\subseteq C^{*}\\,;\\;d_{i}\\in D}\n  \n\nThe transition function \n  \n    \n      \n        α\n      \n    \n    {\\displaystyle \\alpha }\n  \n is defined as\n\n  \n    \n      \n        α\n        :\n        D\n        ×\n        \n          Σ\n          \n            ∗\n          \n        \n        →\n        Σ\n        ×\n        D\n      \n    \n    {\\displaystyle \\alpha :D\\times \\Sigma ^{*}\\to \\Sigma \\times D}\n  \n\nGiven the transition \n  \n    \n      \n        ⊢\n      \n    \n    {\\displaystyle \\vdash }\n  \n\n  \n    \n      \n        ⊢⊆\n        (\n        Σ\n        ×\n        D\n        ×\n        \n          Σ\n          \n            ∗\n          \n        \n        )\n        ×\n        (\n        Σ\n        ×\n        D\n        ×\n        \n          Σ\n          \n            ∗\n          \n        \n        )\n      \n    \n    {\\displaystyle \\vdash \\subseteq (\\Sigma \\times D\\times \\Sigma ^{*})\\times (\\Sigma \\times D\\times \\Sigma ^{*})}\n  \n\n  \n    \n      \n        \n          S\n          \n            j\n          \n        \n        =\n        (\n        \n          b\n          \n            j\n          \n        \n        ,\n        \n          d\n          \n            m\n          \n        \n        ,\n        \n          v\n          \n            j\n          \n        \n        )\n        ⊢\n        (\n        \n          b\n          \n            j\n            +\n            1\n          \n        \n        ,\n        \n          d\n          \n            n\n          \n        \n        ,\n        \n          v\n          \n            j\n            +\n            1\n          \n        \n        )\n      \n    \n    {\\displaystyle S_{j}=(b_{j},d_{m},v_{j})\\vdash (b_{j+1},d_{n},v_{j+1})}\n  \n\n  \n    \n      \n        \n          E\n          \n            j\n          \n        \n        =\n        (\n        \n          a\n          \n            j\n          \n        \n        ,\n        \n          c\n          \n            j\n          \n        \n        )\n        ⊢\n        (\n        \n          a\n          \n            j\n            +\n            1\n          \n        \n        ,\n        \n          c\n          \n            k\n          \n        \n        )\n      \n    \n    {\\displaystyle E_{j}=(a_{j},c_{j})\\vdash (a_{j+1},c_{k})}\n  \n\n  \n    \n      \n        (\n        \n          b\n          \n            j\n            +\n            1\n          \n        \n        ,\n        \n          d\n          \n            n\n          \n        \n        )\n        =\n        α\n        (\n        \n          d\n          \n            m\n          \n        \n        ,\n        \n          v\n          \n            j\n          \n        \n        )\n        ;\n        (\n        \n          b\n          \n            j\n            +\n            1\n          \n        \n        ,\n        \n          c\n          \n            k\n          \n        \n        )\n        =\n        ϵ\n        (\n        \n          c\n          \n            j\n          \n        \n        )\n        ;\n        \n          a\n          \n            j\n          \n        \n        ∈\n        Σ\n        ,\n      \n    \n    {\\displaystyle (b_{j+1},d_{n})=\\alpha (d_{m},v_{j});(b_{j+1},c_{k})=\\epsilon (c_{j});a_{j}\\in \\Sigma ,}\n  \n\nthe isolated test path \n  \n    \n      \n        \n          P\n          \n            m\n          \n        \n      \n    \n    {\\displaystyle P_{m}}\n  \n consists of\n\n  \n    \n      \n        \n          \n            \n              \n                \n                  P\n                  \n                    m\n                  \n                \n              \n              \n                \n                =\n                (\n                \n                  b\n                  \n                    0\n                  \n                \n                ,\n                \n                  d\n                  \n                    0\n                  \n                \n                ,\n                \n                  v\n                  \n                    0\n                  \n                \n                )\n                ⊢\n                .\n                .\n                .\n                ⊢\n                (\n                \n                  b\n                  \n                    i\n                  \n                \n                ,\n                \n                  d\n                  \n                    i\n                  \n                \n                ,\n                \n                  v\n                  \n                    i\n                  \n                \n                )\n                \n                  ⊢\n                  \n                    ∗\n                  \n                \n                (\n                \n                  b\n                  \n                    n\n                  \n                \n                ,\n                \n                  d\n                  \n                    n\n                  \n                \n                ,\n                \n                  v\n                  \n                    n\n                  \n                \n                )\n              \n            \n            \n              \n              \n                \n                =\n                (\n                \n                  b\n                  \n                    0\n                  \n                \n                ,\n                \n                  c\n                  \n                    0\n                  \n                \n                )\n                ⊢\n                .\n                .\n                .\n                ⊢\n                (\n                \n                  b\n                  \n                    m\n                  \n                \n                ,\n                \n                  c\n                  \n                    m\n                  \n                \n                )\n                \n                  ⊢\n                  \n                    ∗\n                  \n                \n                (\n                \n                  b\n                  \n                    n\n                  \n                \n                ,\n                \n                  c\n                  \n                    n\n                  \n                \n                )\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}P_{m}&=(b_{0},d_{0},v_{0})\\vdash ...\\vdash (b_{i},d_{i},v_{i})\\vdash ^{*}(b_{n},d_{n},v_{n})\\\\&=(b_{0},c_{0})\\vdash ...\\vdash (b_{m},c_{m})\\vdash ^{*}(b_{n},c_{n})\\end{aligned}}}\n  \n\n  \n    \n      \n        \n          b\n          \n            i\n          \n        \n        ∈\n        Σ\n        ;\n        \n          c\n          \n            m\n          \n        \n        ∈\n        \n          d\n          \n            i\n          \n        \n        ;\n        v\n        ∈\n        \n          C\n          \n            ∗\n          \n        \n        ;\n        \n          d\n          \n            0\n          \n        \n        =\n        S\n        ;\n        \n          d\n          \n            n\n          \n        \n        =\n        E\n        .\n      \n    \n    {\\displaystyle b_{i}\\in \\Sigma ;c_{m}\\in d_{i};v\\in C^{*};d_{0}=S;d_{n}=E.}\n\nTest case graph\nA test case graph illustrates all the necessary independent paths (test cases) to cover all isolated conditions. Conditions are represented by nodes, and condition values (situations) by edges. An edge addresses all program situations. Each situation is connected to one preceding and successive condition. Test cases might overlap due to isolated conditions.\n\nInductive proof of a number of condition paths\nThe elementary comparison testing method can be used to determine the number of condition paths by inductive proof.\n\nThere are \n  \n    \n      \n        r\n        =\n        \n          2\n          \n            n\n          \n        \n      \n    \n    {\\displaystyle r=2^{n}}\n  \n possible condition value combinations\n\n  \n    \n      \n        ∀\n        \n          i\n        \n        ∈\n        {\n        1\n        ,\n        .\n        .\n        .\n        ,\n        n\n        }\n        ,\n         \n        \n          c\n          \n            i\n          \n        \n        ↦\n        {\n        0\n        ,\n         \n        1\n        }\n        .\n      \n    \n    {\\displaystyle \\forall {i}\\in \\{1,...,n\\},\\ c_{i}\\mapsto \\{0,\\ 1\\}.}\n  \n\nWhen each condition \n  \n    \n      \n        \n          c\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle c_{i}}\n  \n is isolated, the number of required test cases \n  \n    \n      \n        T\n      \n    \n    {\\displaystyle T}\n  \n per decision is:\n\n  \n    \n      \n        T\n        =\n        \n          log\n          \n            2\n          \n        \n        ⁡\n        (\n        r\n        )\n        +\n        1\n        =\n        n\n        +\n        1.\n      \n    \n    {\\displaystyle T=\\log _{2}(r)+1=n+1.}\n  \n\n  \n    \n      \n        ∀\n        \n          i\n        \n        ∈\n        {\n        1\n        ,\n        .\n        .\n        .\n        ,\n        n\n        }\n      \n    \n    {\\displaystyle \\forall {i}\\in \\{1,...,n\\}}\n  \n there are \n  \n    \n      \n        0\n        <\n        e\n        <\n        i\n        +\n        1\n      \n    \n    {\\displaystyle 0<e<i+1}\n  \n edges from parent nodes \n  \n    \n      \n        \n          c\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle c_{i}}\n  \n and \n  \n    \n      \n        s\n        =\n        2\n      \n    \n    {\\displaystyle s=2}\n  \n edges to child nodes from \n  \n    \n      \n        \n          c\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle c_{i}}\n  \n.\nEach individual condition \n  \n    \n      \n        \n          c\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle c_{i}}\n  \n connects to at least one path\n\n  \n    \n      \n        ∀\n        \n          i\n        \n        ∈\n        {\n        1\n        ,\n        .\n        .\n        .\n        ,\n        n\n        −\n        1\n        }\n        ,\n         \n        \n          c\n          \n            i\n          \n        \n        ↦\n        {\n        0\n        ,\n         \n        1\n        }\n      \n    \n    {\\displaystyle \\forall {i}\\in \\{1,...,n-1\\},\\ c_{i}\\mapsto \\{0,\\ 1\\}}\n  \n\nfrom the maximal possible \n  \n    \n      \n        n\n      \n    \n    {\\displaystyle n}\n  \n connecting to \n  \n    \n      \n        \n          c\n          \n            n\n          \n        \n      \n    \n    {\\displaystyle c_{n}}\n  \n isolating \n  \n    \n      \n        \n          c\n          \n            n\n          \n        \n      \n    \n    {\\displaystyle c_{n}}\n  \n.\nAll predecessor conditions \n  \n    \n      \n        \n          c\n          \n            i\n          \n        \n        ;\n         \n        i\n        <\n        n\n      \n    \n    {\\displaystyle c_{i};\\ i<n}\n  \n and respective paths are isolated. Therefore, when one node (condition) is added, the total number of paths, and required test cases, from start to finish increases by:\n\n  \n    \n      \n        T\n        =\n        n\n        −\n        1\n        +\n        2\n        =\n        n\n        +\n        1.\n      \n    \n    {\\displaystyle T=n-1+2=n+1.}\n  \n\nQ.E.D.\n\nTest-case design steps\nIdentify decisions\nDetermine test situations per decision point (Modified Condition / Decision Coverage)\nCreate logical test-case matrix\nCreate physical test-case matrix\n\nExample\nThis example shows ETC applied to a holiday booking system. The discount system offers reduced-price vacations. The offered discounts are \n  \n    \n      \n        −\n        20\n        %\n      \n    \n    {\\displaystyle -20\\%}\n  \n for members or for expensive vacations, \n  \n    \n      \n        −\n        10\n        %\n      \n    \n    {\\displaystyle -10\\%}\n  \n for moderate vacations with workday departures, and \n  \n    \n      \n        0\n        %\n      \n    \n    {\\displaystyle 0\\%}\n  \n otherwise. The example shows the creation of logical and physical test cases for all isolated conditions.\nPseudocode\n\nif days > 15 or price > 1000 or member then\n    return −0.2\nelse if (days > 8 and days ≤ 15 or price ≥ 500 and price ≤ 1000) and workday then\n    return −0.1\nelse\n    return 0.0\n\nFactors\n\nNumber of days: \n  \n    \n      \n        <\n        8\n        ;\n         \n        8\n        −\n        15\n        ;\n         \n        >\n        15\n      \n    \n    {\\displaystyle <8;\\ 8-15;\\ >15}\n  \n\nPrice (euros): \n  \n    \n      \n        <\n        500\n        ;\n         \n        500\n        −\n        1000\n        ;\n         \n        >\n        1000\n      \n    \n    {\\displaystyle <500;\\ 500-1000;\\ >1000}\n  \n\nMembership card: none; silver; gold; platinum\nDeparture date: workday; weekend; holiday\n\n  \n    \n      \n        T\n        =\n        3\n        ×\n        3\n        ×\n        4\n        ×\n        3\n        =\n        108\n      \n    \n    {\\displaystyle T=3\\times 3\\times 4\\times 3=108}\n  \n possible combinations (test cases).\n\nExample in Python:\n\nStep 1: Decisions\nd\n                  \n                    1\n                  \n                \n              \n              \n                \n                =\n                \n                  days\n                \n                >\n                15\n                 \n                \n                  or\n                \n                 \n                \n                  price\n                \n                >\n                1000\n                 \n                \n                  Eur\n                \n                 \n                \n                  or\n                \n                 \n                \n                  member\n                \n              \n            \n            \n              \n                \n                  c\n                  \n                    1\n                  \n                \n              \n              \n                \n                =\n                \n                  days\n                \n                >\n                15\n              \n            \n            \n              \n                \n                  c\n                  \n                    2\n                  \n                \n              \n              \n                \n                =\n                \n                  price\n                \n                >\n                1000\n              \n            \n            \n              \n                \n                  c\n                  \n                    3\n                  \n                \n              \n              \n                \n                =\n                \n                  member\n                \n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}d_{1}&={\\text{days}}>15\\ {\\text{or}}\\ {\\text{price}}>1000\\ {\\text{Eur}}\\ {\\text{or}}\\ {\\text{member}}\\\\c_{1}&={\\text{days}}>15\\\\c_{2}&={\\text{price}}>1000\\\\c_{3}&={\\text{member}}\\\\\\end{aligned}}}\n  \n\n  \n    \n      \n        \n          \n            \n              \n                \n                  d\n                  \n                    2\n                  \n                \n              \n              \n                \n                =\n                (\n                8\n                <\n                \n                  days\n                \n                <\n                15\n                 \n                \n                  or\n                \n                 \n                500\n                <\n                \n                  price\n                \n                <\n                1000\n                 \n                \n                  Eur\n                \n                )\n                 \n                \n                  and\n                \n                 \n                \n                  workday\n                \n              \n            \n            \n              \n                \n                  c\n                  \n                    4\n                  \n                \n              \n              \n                \n                =\n                8\n                <\n                \n                  days\n                \n                <\n                15\n              \n            \n            \n              \n                \n                  c\n                  \n                    5\n                  \n                \n              \n              \n                \n                =\n                500\n                <\n                \n                  price\n                \n                <\n                1000\n                 \n                \n                  Eur\n                \n              \n            \n            \n              \n                \n                  c\n                  \n                    6\n                  \n                \n              \n              \n                \n                =\n                \n                  workday\n                \n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}d_{2}&=(8<{\\text{days}}<15\\ {\\text{or}}\\ 500<{\\text{price}}<1000\\ {\\text{Eur}})\\ {\\text{and}}\\ {\\text{workday}}\\\\c_{4}&=8<{\\text{days}}<15\\\\c_{5}&=500<{\\text{price}}<1000\\ {\\text{Eur}}\\\\c_{6}&={\\text{workday}}\\\\\\end{aligned}}}\n\nStep 2: MC/DC Matrix\nThe highlighted diagonals in the MC/DC Matrix are describing the isolated conditions:\n\n  \n    \n      \n        (\n        \n          c\n          \n            i\n          \n        \n        ,\n        \n          c\n          \n            i\n          \n        \n        )\n        ↦\n        {\n        1\n        ,\n        0\n        }\n      \n    \n    {\\displaystyle (c_{i},c_{i})\\mapsto \\{1,0\\}}\n  \n\nall duplicate situations are regarded as proven and removed.\n\nStep 3: Logical test-Case matrix\nTest cases are formed by tracing decision paths. For every decision \n  \n    \n      \n        \n          d\n          \n            i\n          \n        \n        ;\n         \n        0\n        <\n        i\n        <\n        n\n        +\n        1\n      \n    \n    {\\displaystyle d_{i};\\ 0<i<n+1}\n  \n a succeeding and preceding subpath is searched until every connected path has a start \n  \n    \n      \n        S\n      \n    \n    {\\displaystyle S}\n  \n and an end \n  \n    \n      \n        E\n      \n    \n    {\\displaystyle E}\n  \n:\n\n  \n    \n      \n        \n          \n            \n              \n                \n                  T\n                  \n                    1\n                  \n                \n              \n              \n                \n                =\n                (\n                \n                  d\n                  \n                    1\n                  \n                \n                ,\n                100\n                )\n                ⊢\n                (\n                1\n                ,\n                E\n                )\n              \n            \n            \n              \n                \n                  T\n                  \n                    2\n                  \n                \n              \n              \n                \n                =\n                (\n                \n                  d\n                  \n                    1\n                  \n                \n                ,\n                000\n                )\n                ⊢\n                (\n                0\n                ,\n                \n                  d\n                  \n                    2\n                  \n                \n                ,\n                100\n                )\n                ⊢\n                (\n                1\n                ,\n                E\n                )\n              \n            \n            \n              \n                \n                  T\n                  \n                    3\n                  \n                \n              \n              \n                \n                =\n                (\n                \n                  d\n                  \n                    1\n                  \n                \n                ,\n                010\n                )\n                ⊢\n                (\n                1\n                ,\n                E\n                )\n              \n            \n            \n              \n                ⋮\n              \n            \n            \n              \n                \n                  T\n                  \n                    n\n                    +\n                    1\n                  \n                \n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}T_{1}&=(d_{1},100)\\vdash (1,E)\\\\T_{2}&=(d_{1},000)\\vdash (0,d_{2},100)\\vdash (1,E)\\\\T_{3}&=(d_{1},010)\\vdash (1,E)\\\\\\vdots \\\\T_{n+1}\\end{aligned}}}\n\nStep 4: Physical test-case matrix\nPhysical test cases are created from logical test cases by filling in actual value representations and their respective results.\n\nTest-case graph\nIn the example test case graph, all test cases and their isolated conditions are marked by colors, and the remaining paths are implicitly passed.\n\nSee also\nCode coverage § Multiple condition coverage\nControl-flow graph\nDecision-to-decision path\n\n\n== References ==\n",
  "categories": [
    "Category:Articles with example Python (programming language) code",
    "Category:Articles with example pseudocode",
    "Category:Pages that use a deprecated format of the math tags",
    "Category:Software testing"
  ],
  "archived_date": "20241220_214759",
  "source_url": "https://en.wikipedia.org/wiki/Elementary_comparison_testing"
}