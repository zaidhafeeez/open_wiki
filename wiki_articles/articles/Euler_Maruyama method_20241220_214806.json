{
  "title": "Euler–Maruyama method",
  "summary": "In Itô calculus, the Euler–Maruyama method (also simply called the Euler method) is a method for the approximate numerical solution of a stochastic differential equation (SDE). It is an extension of the Euler method for ordinary differential equations to stochastic differential equations named after Leonhard Euler and Gisiro Maruyama. The same generalization cannot be done for any arbitrary deterministic method.\nConsider the stochastic differential equation (see Itô calculus)\n\n  \n    \n      \n   ",
  "content": "---\ntitle: Euler–Maruyama method\nurl: https://en.wikipedia.org/wiki/Euler%E2%80%93Maruyama_method\nlanguage: en\ncategories: [\"Category:Articles with example MATLAB/Octave code\", \"Category:Articles with example Python (programming language) code\", \"Category:Articles with short description\", \"Category:Leonhard Euler\", \"Category:Numerical differential equations\", \"Category:Short description is different from Wikidata\", \"Category:Stochastic differential equations\"]\nreferences: 0\nlast_modified: 2024-12-19T13:59:04Z\n---\n\n# Euler–Maruyama method\n\n## Summary\n\nIn Itô calculus, the Euler–Maruyama method (also simply called the Euler method) is a method for the approximate numerical solution of a stochastic differential equation (SDE). It is an extension of the Euler method for ordinary differential equations to stochastic differential equations named after Leonhard Euler and Gisiro Maruyama. The same generalization cannot be done for any arbitrary deterministic method.\nConsider the stochastic differential equation (see Itô calculus)\n\n  \n    \n      \n   \n\n## Full Content\n\nIn Itô calculus, the Euler–Maruyama method (also simply called the Euler method) is a method for the approximate numerical solution of a stochastic differential equation (SDE). It is an extension of the Euler method for ordinary differential equations to stochastic differential equations named after Leonhard Euler and Gisiro Maruyama. The same generalization cannot be done for any arbitrary deterministic method.\nConsider the stochastic differential equation (see Itô calculus)\n\n  \n    \n      \n        \n          d\n        \n        \n          X\n          \n            t\n          \n        \n        =\n        a\n        (\n        \n          X\n          \n            t\n          \n        \n        ,\n        t\n        )\n        \n        \n          d\n        \n        t\n        +\n        b\n        (\n        \n          X\n          \n            t\n          \n        \n        ,\n        t\n        )\n        \n        \n          d\n        \n        \n          W\n          \n            t\n          \n        \n        ,\n      \n    \n    {\\displaystyle \\mathrm {d} X_{t}=a(X_{t},t)\\,\\mathrm {d} t+b(X_{t},t)\\,\\mathrm {d} W_{t},}\n  \n\nwith initial condition X0 = x0, where Wt denotes the Wiener process, and suppose that we wish to solve this SDE on some interval of time [0, T]. Then the Euler–Maruyama approximation to the true solution X is the Markov chain Y defined as follows:\n\nPartition the interval [0, T] into N equal subintervals of width \n  \n    \n      \n        Δ\n        t\n        >\n        0\n      \n    \n    {\\displaystyle \\Delta t>0}\n  \n:\n\n  \n    \n      \n        0\n        =\n        \n          τ\n          \n            0\n          \n        \n        <\n        \n          τ\n          \n            1\n          \n        \n        <\n        ⋯\n        <\n        \n          τ\n          \n            N\n          \n        \n        =\n        T\n        \n           and \n        \n        Δ\n        t\n        =\n        T\n        \n          /\n        \n        N\n        ;\n      \n    \n    {\\displaystyle 0=\\tau _{0}<\\tau _{1}<\\cdots <\\tau _{N}=T{\\text{ and }}\\Delta t=T/N;}\n  \n\nSet Y0 = x0\nRecursively define Yn for 0 ≤ n ≤ N-1 by\n\n  \n    \n      \n        \n        \n          Y\n          \n            n\n            +\n            1\n          \n        \n        =\n        \n          Y\n          \n            n\n          \n        \n        +\n        a\n        (\n        \n          Y\n          \n            n\n          \n        \n        ,\n        \n          τ\n          \n            n\n          \n        \n        )\n        \n        Δ\n        t\n        +\n        b\n        (\n        \n          Y\n          \n            n\n          \n        \n        ,\n        \n          τ\n          \n            n\n          \n        \n        )\n        \n        Δ\n        \n          W\n          \n            n\n          \n        \n        ,\n      \n    \n    {\\displaystyle \\,Y_{n+1}=Y_{n}+a(Y_{n},\\tau _{n})\\,\\Delta t+b(Y_{n},\\tau _{n})\\,\\Delta W_{n},}\n  \n\nwhere\n\n  \n    \n      \n        Δ\n        \n          W\n          \n            n\n          \n        \n        =\n        \n          W\n          \n            \n              τ\n              \n                n\n                +\n                1\n              \n            \n          \n        \n        −\n        \n          W\n          \n            \n              τ\n              \n                n\n              \n            \n          \n        \n        .\n      \n    \n    {\\displaystyle \\Delta W_{n}=W_{\\tau _{n+1}}-W_{\\tau _{n}}.}\n  \n\nThe random variables ΔWn are independent and identically distributed normal random variables with expected value zero and variance Δt.\n\nExample\nNumerical simulation\nAn area that has benefited significantly from SDEs is mathematical biology. As many biological processes are both stochastic and continuous in nature, numerical methods of solving SDEs are highly valuable in the field.\nThe graphic depicts a stochastic differential equation solved using the Euler-Maruyama method. The deterministic counterpart is shown in blue.\n\nComputer implementation\nThe following Python code implements the Euler–Maruyama method and uses it to solve the Ornstein–Uhlenbeck process defined by\n\n  \n    \n      \n        d\n        \n          Y\n          \n            t\n          \n        \n        =\n        θ\n        ⋅\n        (\n        μ\n        −\n        \n          Y\n          \n            t\n          \n        \n        )\n        \n        \n          \n            d\n          \n        \n        t\n        +\n        σ\n        \n        \n          \n            d\n          \n        \n        \n          W\n          \n            t\n          \n        \n      \n    \n    {\\displaystyle dY_{t}=\\theta \\cdot (\\mu -Y_{t})\\,{\\mathrm {d} }t+\\sigma \\,{\\mathrm {d} }W_{t}}\n  \n\n  \n    \n      \n        \n          Y\n          \n            0\n          \n        \n        =\n        \n          Y\n          \n            \n              i\n              n\n              i\n              t\n            \n          \n        \n        .\n      \n    \n    {\\displaystyle Y_{0}=Y_{\\mathrm {init} }.}\n  \n\nThe random numbers for \n  \n    \n      \n        \n          \n            d\n          \n        \n        \n          W\n          \n            t\n          \n        \n      \n    \n    {\\displaystyle {\\mathrm {d} }W_{t}}\n  \n are generated using the NumPy mathematics package.\n\nThe following is simply the translation of the above code into the MATLAB (R2019b) programming language:\n\nSee also\nMilstein method\nRunge–Kutta method (SDE)\nLeimkuhler–Matthews method\n\n\n== References ==\n",
  "categories": [
    "Category:Articles with example MATLAB/Octave code",
    "Category:Articles with example Python (programming language) code",
    "Category:Articles with short description",
    "Category:Leonhard Euler",
    "Category:Numerical differential equations",
    "Category:Short description is different from Wikidata",
    "Category:Stochastic differential equations"
  ],
  "archived_date": "20241220_214806",
  "source_url": "https://en.wikipedia.org/wiki/Euler%E2%80%93Maruyama_method"
}