{
  "title": "Foreach loop",
  "summary": "In computer programming, foreach loop (or for-each loop) is a control flow statement for traversing items in a collection. foreach is usually used in place of a standard for loop statement. Unlike other for loop constructs, however, foreach loops usually maintain no explicit counter: they essentially say \"do this to everything in this set\", rather than \"do this x times\". This avoids potential off-by-one errors and makes code simpler to read. In object-oriented languages, an iterator, even if imp",
  "content": "---\ntitle: Foreach loop\nurl: https://en.wikipedia.org/wiki/Foreach_loop\nlanguage: en\ncategories: [\"Category:Articles with example Ada code\", \"Category:Articles with example C++ code\", \"Category:Articles with example C Sharp code\", \"Category:Articles with example C code\", \"Category:Articles with example D code\", \"Category:Articles with example Eiffel code\", \"Category:Articles with example Haskell code\", \"Category:Articles with example JavaScript code\", \"Category:Articles with example Java code\", \"Category:Articles with example Lisp (programming language) code\", \"Category:Articles with example MATLAB/Octave code\", \"Category:Articles with example OCaml code\", \"Category:Articles with example Objective-C code\", \"Category:Articles with example PHP code\", \"Category:Articles with example Pascal code\", \"Category:Articles with example Perl code\", \"Category:Articles with example Python (programming language) code\", \"Category:Articles with example R code\", \"Category:Articles with example Racket code\", \"Category:Articles with example Ruby code\", \"Category:Articles with example Rust code\", \"Category:Articles with example Scala code\", \"Category:Articles with example Scheme (programming language) code\", \"Category:Articles with example Smalltalk code\", \"Category:Articles with example Swift code\", \"Category:Articles with example Tcl code\", \"Category:Articles with short description\", \"Category:Control flow\", \"Category:Iteration in programming\", \"Category:Programming language comparisons\", \"Category:Short description is different from Wikidata\"]\nreferences: 0\nlast_modified: 2024-12-19T13:44:58Z\n---\n\n# Foreach loop\n\n## Summary\n\nIn computer programming, foreach loop (or for-each loop) is a control flow statement for traversing items in a collection. foreach is usually used in place of a standard for loop statement. Unlike other for loop constructs, however, foreach loops usually maintain no explicit counter: they essentially say \"do this to everything in this set\", rather than \"do this x times\". This avoids potential off-by-one errors and makes code simpler to read. In object-oriented languages, an iterator, even if imp\n\n## Full Content\n\nIn computer programming, foreach loop (or for-each loop) is a control flow statement for traversing items in a collection. foreach is usually used in place of a standard for loop statement. Unlike other for loop constructs, however, foreach loops usually maintain no explicit counter: they essentially say \"do this to everything in this set\", rather than \"do this x times\". This avoids potential off-by-one errors and makes code simpler to read. In object-oriented languages, an iterator, even if implicit, is often used as the means of traversal.\nThe foreach statement in some languages has some defined order, processing each item in the collection from the first to the last.\nThe foreach statement in many other languages, especially array programming languages, does not have any particular order. This simplifies loop optimization in general and in particular allows vector processing of items in the collection concurrently.\n\nSyntax\nSyntax varies among languages. Most use the simple word for, although other use the more logical word foreach, roughly as follows:\n\nforeach(key, value) in collection {\n  # Do something to value #\n}\n\nLanguage support\nProgramming languages which support foreach loops include ABC, ActionScript, Ada, C++ (since C++11), C#, ColdFusion Markup Language (CFML), Cobra, D, Daplex (query language), Delphi, ECMAScript, Erlang, Java (since 1.5), JavaScript, Lua, Objective-C (since 2.0), ParaSail, Perl, PHP, Prolog, Python, R, REALbasic, Rebol, Red, Ruby, Scala, Smalltalk, Swift, Tcl, tcsh, Unix shells, Visual Basic (.NET), and Windows PowerShell. Notable languages without foreach are C, and C++ pre-C++11.\n\nActionScript 3.0\nActionScript supports the ECMAScript 4.0 Standard for for each .. in which pulls the value at each index.\n\nIt also supports for .. in which pulls the key at each index.\n\nAda\nAda supports foreach loops as part of the normal for loop. Say X is an array:\n\nThis syntax is used on mostly arrays, but will also work with other types when a full iteration is needed.\nAda 2012 has generalized loops to foreach loops on any kind of container (array, lists, maps...):\n\nC\nThe C language does not have collections or a foreach construct. However, it has several standard data structures that can be used as collections, and foreach can be made easily with a macro.\nHowever, two obvious problems occur:\n\nThe macro is unhygienic: it declares a new variable in the existing scope which remains after the loop.\nOne foreach macro cannot be defined that works with different collection types (e.g., array and linked list) or that is extensible to user types.\nC string as a collection of char\n\nC int array as a collection of int (array size known at compile-time)\n\nMost general: string or array as collection (collection size known at run-time)\n\nidxtype can be removed and typeof(col[0]) used in its place with GCC\n\nC#\nIn C#, assuming that myArray is an array of integers:\n\nLanguage Integrated Query (LINQ) provides the following syntax, accepting a delegate or lambda expression:\n\nC++\nC++11 provides a foreach loop. The syntax is similar to that of Java:\n\nC++11 range-based for statements have been implemented in GNU Compiler Collection (GCC) (since version 4.6), Clang (since version 3.0) and Visual C++ 2012 (version 11 )\nThe range-based for is syntactic sugar equivalent to:\n\nThe compiler uses argument-dependent lookup to resolve the begin and end functions.\nThe C++ Standard Library also supports for_each, that applies each element to a function, which can be any predefined function or a lambda expression. While range-based for is only from the start to the end, the range or direction can be changed by altering the first two parameters.\n\nQt, a C++ framework, offers a macro providing foreach loops using the STL iterator interface:\n\nBoost, a set of free peer-reviewed portable C++ libraries also provides foreach loops:\n\nC++/CLI\nThe C++/CLI language proposes a construct similar to C#.\nAssuming that myArray is an array of integers:\n\nColdFusion Markup Language (CFML)\nScript syntax\nTag syntax\nCFML incorrectly identifies the value as \"index\" in this construct; the index variable does receive the actual value of the array element, not its index.\n\nCommon Lisp\nCommon Lisp provides foreach ability either with the dolist macro:\n\nor the powerful loop macro to iterate on more data types\n\nand even with the mapcar function:\n\nD\nor\n\nDart\nObject Pascal, Delphi\nForeach support was added in Delphi 2005, and uses an enumerator variable that must be declared in the var section.\n\nEiffel\nThe iteration (foreach) form of the Eiffel loop construct is introduced by the keyword across.\nIn this example, every element of the structure my_list is printed:\n\nThe local entity ic is an instance of the library class ITERATION_CURSOR. The cursor's feature item provides access to each structure element. Descendants of class ITERATION_CURSOR can be created to handle specialized iteration algorithms. The types of objects that can be iterated across (my_list in the example) are based on classes that inherit from the library class ITERABLE.\nThe iteration form of the Eiffel loop can also be used as a boolean expression when the keyword loop is replaced by either all (effecting universal quantification) or some (effecting existential quantification).\nThis iteration is a boolean expression which is true if all items in my_list have counts greater than three:\n\nThe following is true if at least one item has a count greater than three:\n\nGo\nGo's foreach loop can be used to loop over an array, slice, string, map, or channel.\nUsing the two-value form gets the index/key (first element) and the value (second element):\n\nUsing the one-value form gets the index/key (first element):\n\nGroovy\nGroovy supports for loops over collections like arrays, lists and ranges:\n\nGroovy also supports a C-style for loop with an array index:\n\nCollections in Groovy can also be iterated over using the each keyword\nand a closure. By default, the loop dummy is named it\n\nHaskell\nHaskell allows looping over lists with monadic actions using mapM_ and forM_ (mapM_ with its arguments flipped) from Control.Monad:\n\nIt's also possible to generalize those functions to work on applicative functors rather than monads and any data structure that is traversable using traverse (for with its arguments flipped) and mapM (forM with its arguments flipped) from Data.Traversable.\n\nHaxe\nJava\nIn Java, a foreach-construct was introduced in Java Development Kit (JDK) 1.5.0.\nOfficial sources use several names for the construct. It is referred to as the \"Enhanced for Loop\", the \"For-Each Loop\", and the \"foreach statement\".: 264 \n\nJava also provides the stream api since java 8:: 294–203\n\nJavaScript\nIn ECMAScript 5, a callback-based forEach() method was added to the array prototype:The ECMAScript 6 standard introduced a more conventional for..of syntax that works on all iterables rather than operating on only array instances. However, no index variable is available with the syntax.\n\nFor unordered iteration over the keys in an object, JavaScript features the for..in loop:\n\nTo limit the iteration to the object's own properties, excluding those inherited through the prototype chain, it's often useful to add a hasOwnProperty() test (or a hasOwn() test if supported).\n\nAlternatively, the Object.keys() method combined with the for..of loop can be used for a less verbose way to iterate over the keys of an object.\n\nLua\nSource:\n\nIterate only through numerical index values:Iterate through all index values:\n\nMathematica\nIn Mathematica, Do will simply evaluate an expression for each element of a list, without returning any value.\n\nIt is more common to use Table, which returns the result of each evaluation in a new list.\n\nMATLAB\nMint\nFor each loops are supported in Mint, possessing the following syntax:\n\nThe for (;;) or while (true) infinite loop\nin Mint can be written using a for each loop and an infinitely long list.\n\nObjective-C\nForeach loops, called Fast enumeration, are supported starting in Objective-C 2.0. They can be used to iterate over any object that implements the NSFastEnumeration protocol, including NSArray, NSDictionary (iterates over keys), NSSet, etc.\n\nNSArrays can also broadcast a message to their members:\n\nWhere blocks are available, an NSArray can automatically perform a block on every contained item:\n\nThe type of collection being iterated will dictate the item returned with each iteration.\nFor example:\n\nOCaml\nOCaml is a functional programming language. Thus, the equivalent of a foreach loop can be achieved as a library function over lists and arrays.\nFor lists:\n\nor in short way:\n\nFor arrays:\n\nor in short way:\n\nParaSail\nThe ParaSail parallel programming language supports several kinds of iterators, including a general \"for each\" iterator over a container:\n\nParaSail also supports filters on iterators, and the ability to refer to both the key and the value of a map. Here is a forward iteration over the elements of \"My_Map\" selecting only elements where the keys are in \"My_Set\":\n\nPascal\nIn Pascal, ISO standard 10206:1990 introduced iteration over set types, thus:\n\nPerl\nIn Perl, foreach (which is equivalent to the shorter for) can be used to traverse elements of a list.  The expression which denotes the collection to loop over is evaluated in list-context and each item of the resulting list is, in turn, aliased to the loop variable.\nList literal example:\n\nArray examples:\n\nHash example:\n\nDirect modification of collection members:\n\nPHP\nIt is also possible to extract both keys and values using the alternate syntax:\n\nDirect modification of collection members:\n\nMore information\n\nPython\nPython's tuple assignment, fully available in its foreach loop, also makes it trivial to iterate on (key, value) pairs in dictionaries:\n\nAs for ... in is the only kind of for loop in Python, the equivalent to the \"counter\" loop found in other languages is...\n\n... although using the enumerate function is considered more \"Pythonic\":\n\nR\nAs for ... in is the only kind of for loop in R, the equivalent to the \"counter\" loop found in other languages is...\n\nRacket\nor using the conventional Scheme for-each function:\n\ndo-something-with is a one-argument function.\n\nRaku\nIn Raku, a sister language to Perl, for must be used to traverse elements of a list (foreach is not allowed). The expression which denotes the collection to loop over is evaluated in list-context, but not flattened by default, and each item of the resulting list is, in turn, aliased to the loop variable(s).\nList literal example:\n\nArray examples:\n\nThe for loop in its statement modifier form:\n\nHash example:\n\nor\n\nor\n\nDirect modification of collection members with a doubly pointy block, <->:\n\nRuby\nor\n\nThis can also be used with a hash.\n\nRust\nThe for loop has the structure for <pattern> in <expression> { /* optional statements */ }. It implicitly calls the IntoIterator::into_iter method on the expression, and uses the resulting value, which must implement the Iterator trait. If the expression is itself an iterator, it is used directly by the for loop through an implementation of IntoIterator for all Iterators that returns the iterator unchanged. The loop calls the Iterator::next method on the iterator before executing the loop body. If Iterator::next returns Some(_), the value inside is assigned to the pattern and the loop body is executed; if it returns None, the loop is terminated.\n\nScala\nScheme\ndo-something-with is a one-argument function.\n\nSmalltalk\nSwift\nSwift uses the for…in construct to iterate over members of a collection.\n\nThe for…in loop is often used with the closed and half-open range constructs to iterate over the loop body a certain number of times.\n\nSystemVerilog\nSystemVerilog supports iteration over any vector or array type of any dimensionality using the foreach keyword.\nA trivial example iterates over an array of integers:\n\nA more complex example iterates over an associative array of arrays of integers:\n\nTcl\nTcl uses foreach to iterate over lists. It is possible to specify more than one iterator variable, in which case they are assigned sequential values from the list. \n\nIt is also possible to iterate over more than one list simultaneously. In the following i assumes sequential values of the first list, j sequential values of the second list:\n\nVisual Basic (.NET)\nor without type inference\n\nWindows\nConventional command processor\nInvoke a hypothetical frob command three times, giving it a color name each time.\n\nWindows PowerShell\nFrom a pipeline\n\nXSLT\nSee also\nDo while loop\nFor loop\nWhile loop\nMap (higher-order function)\n\n\n== References ==\n",
  "categories": [
    "Category:Articles with example Ada code",
    "Category:Articles with example C++ code",
    "Category:Articles with example C Sharp code",
    "Category:Articles with example C code",
    "Category:Articles with example D code",
    "Category:Articles with example Eiffel code",
    "Category:Articles with example Haskell code",
    "Category:Articles with example JavaScript code",
    "Category:Articles with example Java code",
    "Category:Articles with example Lisp (programming language) code",
    "Category:Articles with example MATLAB/Octave code",
    "Category:Articles with example OCaml code",
    "Category:Articles with example Objective-C code",
    "Category:Articles with example PHP code",
    "Category:Articles with example Pascal code",
    "Category:Articles with example Perl code",
    "Category:Articles with example Python (programming language) code",
    "Category:Articles with example R code",
    "Category:Articles with example Racket code",
    "Category:Articles with example Ruby code",
    "Category:Articles with example Rust code",
    "Category:Articles with example Scala code",
    "Category:Articles with example Scheme (programming language) code",
    "Category:Articles with example Smalltalk code",
    "Category:Articles with example Swift code",
    "Category:Articles with example Tcl code",
    "Category:Articles with short description",
    "Category:Control flow",
    "Category:Iteration in programming",
    "Category:Programming language comparisons",
    "Category:Short description is different from Wikidata"
  ],
  "archived_date": "20241220_214810",
  "source_url": "https://en.wikipedia.org/wiki/Foreach_loop"
}