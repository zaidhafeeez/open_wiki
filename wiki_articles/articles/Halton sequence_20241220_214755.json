{
  "title": "Halton sequence",
  "summary": "In statistics, Halton sequences are  sequences used to generate points in space for numerical methods such as Monte Carlo simulations.  Although these sequences are deterministic, they are of low discrepancy, that is, appear to be random for many purposes. They were first introduced in 1960 and are an example of a quasi-random number sequence.  They generalize the one-dimensional van der Corput sequences.",
  "content": "---\ntitle: Halton sequence\nurl: https://en.wikipedia.org/wiki/Halton_sequence\nlanguage: en\ncategories: [\"Category:Articles with example Python (programming language) code\", \"Category:Articles with example pseudocode\", \"Category:Articles with short description\", \"Category:Low-discrepancy sequences\", \"Category:Sequences and series\", \"Category:Short description is different from Wikidata\"]\nreferences: 0\nlast_modified: 2024-12-19T13:45:00Z\n---\n\n# Halton sequence\n\n## Summary\n\nIn statistics, Halton sequences are  sequences used to generate points in space for numerical methods such as Monte Carlo simulations.  Although these sequences are deterministic, they are of low discrepancy, that is, appear to be random for many purposes. They were first introduced in 1960 and are an example of a quasi-random number sequence.  They generalize the one-dimensional van der Corput sequences.\n\n## Full Content\n\nIn statistics, Halton sequences are  sequences used to generate points in space for numerical methods such as Monte Carlo simulations.  Although these sequences are deterministic, they are of low discrepancy, that is, appear to be random for many purposes. They were first introduced in 1960 and are an example of a quasi-random number sequence.  They generalize the one-dimensional van der Corput sequences.\n\nExample of Halton sequence used to generate points in (0, 1) × (0, 1) in R2\nThe Halton sequence is constructed according to a deterministic method that uses coprime numbers as its bases. As a simple example, let's take one dimension of the two-dimensional Halton sequence to be based on 2 and the other dimension on 3.  To generate the sequence for 2, we start by dividing the interval (0,1) in half, then in fourths, eighths, etc., which generates\n\n1⁄2,\n1⁄4, 3⁄4,\n1⁄8, 5⁄8, 3⁄8, 7⁄8,\n1⁄16, 9⁄16,...\nEquivalently, the nth number of this sequence is the number n written in binary representation, inverted, and written after the decimal point. This is true for any base. As an example, to find the sixth element of the above sequence, we'd write 6 = 1*22 + 1*21 + 0*20 = 1102, which can be inverted and placed after the decimal point to give 0.0112 = 0*2-1 + 1*2-2 + 1*2-3 = 3⁄8. So the sequence above is the same as\n\n0.12, 0.012, 0.112, 0.0012, 0.1012, 0.0112, 0.1112, 0.00012, 0.10012,...\nTo generate the sequence for 3 for the other dimension, we divide the interval (0,1) in thirds, then ninths, twenty-sevenths, etc., which generates\n\n1⁄3, 2⁄3, 1⁄9, 4⁄9, 7⁄9, 2⁄9, 5⁄9, 8⁄9, 1⁄27,...\nWhen we pair them up, we get a sequence of points in a unit square:\n\n(1⁄2, 1⁄3), (1⁄4, 2⁄3), (3⁄4, 1⁄9), (1⁄8, 4⁄9), (5⁄8, 7⁄9), (3⁄8, 2⁄9), (7⁄8, 5⁄9), (1⁄16, 8⁄9), (9⁄16, 1⁄27).\nEven though standard Halton sequences perform very well in low dimensions, correlation problems have been noted between sequences generated from higher primes.  For example, if we started with the primes 17 and 19, the first 16 pairs of points: (1⁄17, 1⁄19), (2⁄17, 2⁄19), (3⁄17, 3⁄19) ... (16⁄17, 16⁄19) would have perfect linear correlation. To avoid this, it is common to drop the first 20 entries, or some other predetermined quantity depending on the primes chosen. Several other methods have also been proposed. One of the most prominent solutions is the scrambled Halton sequence, which uses permutations of the coefficients used in the construction of the standard sequence. Another solution is the leaped Halton, which skips points in the standard sequence. Using, e.g., only each 409th point (also other prime numbers not used in the Halton core sequence are possible), can achieve significant improvements.\n\nImplementation\nIn pseudocode:\n\nalgorithm Halton-Sequence is\n    inputs: index \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n\n            base \n  \n    \n      \n        b\n      \n    \n    {\\displaystyle b}\n  \n\n    output: result \n  \n    \n      \n        r\n      \n    \n    {\\displaystyle r}\n  \n\n    \n  \n    \n      \n        f\n        ←\n        1\n      \n    \n    {\\displaystyle f\\leftarrow 1}\n  \n\n    \n  \n    \n      \n        r\n        ←\n        0\n      \n    \n    {\\displaystyle r\\leftarrow 0}\n  \n\n    while \n  \n    \n      \n        i\n        >\n        0\n      \n    \n    {\\displaystyle i>0}\n  \n do\n        \n  \n    \n      \n        f\n        ←\n        f\n        \n          /\n        \n        b\n      \n    \n    {\\displaystyle f\\leftarrow f/b}\n  \n\n        \n  \n    \n      \n        r\n        ←\n        r\n        +\n        f\n        ∗\n        (\n        i\n        mod\n        ⁡\n        b\n        )\n      \n    \n    {\\displaystyle r\\leftarrow r+f*(i\\operatorname {mod} b)}\n  \n\n        \n  \n    \n      \n        i\n        ←\n        ⌊\n        i\n        \n          /\n        \n        b\n        ⌋\n      \n    \n    {\\displaystyle i\\leftarrow \\lfloor i/b\\rfloor }\n  \n\n    return \n  \n    \n      \n        r\n      \n    \n    {\\displaystyle r}\n  \n\nAn alternative implementation that produces subsequent numbers of a Halton sequence for base b is given in the following generator function (in Python). This algorithm uses only integer numbers internally, which makes it robust against round-off errors.\n\nSee also\nConstructions of low-discrepancy sequences\n\nReferences\n\nKuipers, L.; Niederreiter, H. (2005), Uniform distribution of sequences, Dover Publications, p. 129, ISBN 0-486-45019-8\nNiederreiter, Harald (1992), Random number generation and quasi-Monte Carlo methods, SIAM, p. 29, ISBN 0-89871-295-5.\nHalton, J. (1964), \"Algorithm 247: Radical-inverse quasi-random point sequence\", Communications of the ACM, 7 (12): 701-701, doi:10.1145/355588.365104, S2CID 47096908.\nKocis, Ladislav; Whiten, William (1997), \"Computational Investigations of Low-Discrepancy Sequences\", ACM Transactions on Mathematical Software, 23 (2): 266–296, doi:10.1145/264029.264064, S2CID 183263.\n",
  "categories": [
    "Category:Articles with example Python (programming language) code",
    "Category:Articles with example pseudocode",
    "Category:Articles with short description",
    "Category:Low-discrepancy sequences",
    "Category:Sequences and series",
    "Category:Short description is different from Wikidata"
  ],
  "archived_date": "20241220_214755",
  "source_url": "https://en.wikipedia.org/wiki/Halton_sequence"
}