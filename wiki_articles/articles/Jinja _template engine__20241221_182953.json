{
  "title": "Jinja (template engine)",
  "summary": "Jinja is a web template engine for the Python programming language. It was created by Armin Ronacher and is licensed under a BSD License. Jinja is similar to the Django template engine, but provides Python-like expressions while ensuring that the templates are evaluated in a sandbox. It is a text-based template language and thus can be used to generate any markup as well as source code.\nThe Jinja template engine allows customization of tags, filters (for formatting or transforming values), tests",
  "content": "---\ntitle: Jinja (template engine)\nurl: https://en.wikipedia.org/wiki/Jinja_(template_engine)\nlanguage: en\ncategories: [\"Category:Articles with example Python (programming language) code\", \"Category:Articles with short description\", \"Category:Free software programmed in Python\", \"Category:Free system software\", \"Category:Python (programming language) libraries\", \"Category:Python (programming language) software\", \"Category:Short description matches Wikidata\", \"Category:Software using the BSD license\", \"Category:Template engines\"]\nreferences: 0\nlast_modified: 2024-12-19T13:54:13Z\n---\n\n# Jinja (template engine)\n\n## Summary\n\nJinja is a web template engine for the Python programming language. It was created by Armin Ronacher and is licensed under a BSD License. Jinja is similar to the Django template engine, but provides Python-like expressions while ensuring that the templates are evaluated in a sandbox. It is a text-based template language and thus can be used to generate any markup as well as source code.\nThe Jinja template engine allows customization of tags, filters (for formatting or transforming values), tests\n\n## Full Content\n\nJinja is a web template engine for the Python programming language. It was created by Armin Ronacher and is licensed under a BSD License. Jinja is similar to the Django template engine, but provides Python-like expressions while ensuring that the templates are evaluated in a sandbox. It is a text-based template language and thus can be used to generate any markup as well as source code.\nThe Jinja template engine allows customization of tags, filters (for formatting or transforming values), tests (for evaluating conditions), and globals.  Also, unlike the Django template engine, Jinja allows the template designer to call functions with arguments on objects.\nJinja is Flask's default template engine  and it is also used by Ansible, Trac, and Salt. It is also used to make SQL macros, for example for use with dbt.\n\nFeatures\nSome of the features of Jinja are:\n\nsandboxed execution\nautomatic HTML escaping to prevent cross-site scripting (XSS) attacks\ntemplate inheritance\ncompiles down to the optimal Python code just-in-time\noptional ahead-of-time template compilation\neasy to debug (for example, line numbers of exceptions directly point to the correct line in the template)\nconfigurable syntax\nJinja, like Smarty, also ships with an easy-to-use filter system similar to the Unix pipeline.\n\nSyntax\nThe syntax for printing output in Jinja is using the double curly braces, for example {{ Hello, World! }}.\nStatements which set variables in jinja or those which do not have an output can be wrapped within {% and %}, using the set keyword. For example {% set foo = 42 %} sets a variable called foo with a value of 42.\nSimilar to above, comments in jinja can be written using a number sign (#) instead of a percentage (%), for example, {# helpful comment #}.\nThe syntax for creating a filter in Jinja is a vertical bar (|), for example {{ variable|filter }}. A variable can have multiple filters, for example {{ variable|filter|filter }}).\nThe syntax for creating a test in Jinja is the keyword is as well as the conditions for evaluating the validity of a test, such as for example {% if variable is divisibleby 10 %}do something{% endif %}).\nFor loops can be used to iterate over sequences, while retaining their object properties. The following example demonstrates iterating over a list of users with username and password fields.\n\nAlthough break and continue are not allowed inside loops, sequences can be filtered.\n\nExample\nHere is a small example of a template file example.html.jinja:\n\nand templating code:\nThis produces the HTML string:\n\nNote the minus sign (-) after the tag  {%:  If you add a minus sign (-) to the start or end of a block (e.g. a For tag), a comment, or a variable expression, the whitespaces before or after that block will be removed.\n\nReferences\nExternal links\nOfficial website\n",
  "categories": [
    "Category:Articles with example Python (programming language) code",
    "Category:Articles with short description",
    "Category:Free software programmed in Python",
    "Category:Free system software",
    "Category:Python (programming language) libraries",
    "Category:Python (programming language) software",
    "Category:Short description matches Wikidata",
    "Category:Software using the BSD license",
    "Category:Template engines"
  ],
  "archived_date": "20241221_182953",
  "source_url": "https://en.wikipedia.org/wiki/Jinja_(template_engine)"
}