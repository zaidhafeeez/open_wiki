{
  "title": "Memento pattern",
  "summary": "The memento pattern is a software design pattern that exposes the private internal state of an object.\nOne example of how this can be used is to restore an object to its previous state (undo via rollback), another is versioning, another is custom serialization.\nThe memento pattern is implemented with three objects: the originator, a caretaker and a memento. The originator is some object that has an internal state. The caretaker is going to do something to the originator, but wants to be able to ",
  "content": "---\ntitle: Memento pattern\nurl: https://en.wikipedia.org/wiki/Memento_pattern\nlanguage: en\ncategories: [\"Category:Articles with example C Sharp code\", \"Category:Articles with example Java code\", \"Category:Articles with example Python (programming language) code\", \"Category:Articles with short description\", \"Category:Short description is different from Wikidata\", \"Category:Software design patterns\"]\nreferences: 0\nlast_modified: 2024-12-19T13:43:05Z\n---\n\n# Memento pattern\n\n## Summary\n\nThe memento pattern is a software design pattern that exposes the private internal state of an object.\nOne example of how this can be used is to restore an object to its previous state (undo via rollback), another is versioning, another is custom serialization.\nThe memento pattern is implemented with three objects: the originator, a caretaker and a memento. The originator is some object that has an internal state. The caretaker is going to do something to the originator, but wants to be able to \n\n## Full Content\n\nThe memento pattern is a software design pattern that exposes the private internal state of an object.\nOne example of how this can be used is to restore an object to its previous state (undo via rollback), another is versioning, another is custom serialization.\nThe memento pattern is implemented with three objects: the originator, a caretaker and a memento. The originator is some object that has an internal state. The caretaker is going to do something to the originator, but wants to be able to undo the change. The caretaker first asks the originator for a memento object. Then it does whatever operation (or sequence of operations) it was going to do. To roll back to the state before the operations, it returns the memento object to the originator. The memento object itself is an opaque object (one which the caretaker cannot, or should not, change). When using this pattern, care should be taken if the originator may change other objects or resourcesâ€”the memento pattern operates on a single object.\nClassic examples of the memento pattern include a pseudorandom number generator (each consumer of the PRNG serves as a caretaker who can initialize the PRNG (the originator) with the same seed (the memento) to produce an identical sequence of pseudorandom numbers) and the state in a finite state machine.\n\nStructure\nUML class and sequence diagram\nIn the above UML class diagram, \nthe Caretaker class refers to the Originator class \nfor saving (createMemento()) and restoring (restore(memento)) originator's internal state.\n\nThe Originator class implements \n\n(1) createMemento() by creating and returning a Memento object that stores originator's current internal state\nand \n\n(2) restore(memento) by restoring state from the passed in Memento object.\n\nThe UML sequence diagram\nshows the run-time interactions: \n\n(1) Saving originator's internal state: The Caretaker object calls createMemento() on the Originator object,\nwhich creates a Memento object, saves \nits current internal state (setState()), and returns the Memento to the Caretaker.\n\n(2) Restoring originator's internal state: The Caretaker calls restore(memento) on the Originator object and specifies the Memento object that stores the state that should be restored. The Originator gets the state (getState()) from the Memento to set its own state.\n\nJava example\nThe following Java program illustrates the \"undo\" usage of the memento pattern.\n\nThe output is:\n\nOriginator: Setting state to State1\nOriginator: Setting state to State2\nOriginator: Saving to Memento.\nOriginator: Setting state to State3\nOriginator: Saving to Memento.\nOriginator: Setting state to State4\nOriginator: State after restoring from Memento: State3\n\nThis example uses a String as the state, which is an immutable object in Java. In real-life scenarios the state will\nalmost always be a mutable object, in which case a copy of the state must be made.\nIt must be said that the implementation shown has a drawback: it declares an internal class. It would be better if this memento strategy could apply to more than one originator.\nThere are mainly three other ways to achieve Memento:\n\nSerialization.\nA class declared in the same package.\nThe object can also be accessed via a proxy, which can achieve any save/restore operation on the object.\n\nC# example\nThe memento pattern allows one to capture the internal state of an object without violating encapsulation such that later one can undo/revert the changes if required. Here one can see that the memento object is actually used to revert the changes made in the object.\n\nPython example\nJavascript example\nReferences\nExternal links\nDescription of Memento Pattern in Ada\nMemento UML Class Diagram with C# and .NET code samples\nSourceMaking Tutorial\nMemento Design Pattern using Java\n",
  "categories": [
    "Category:Articles with example C Sharp code",
    "Category:Articles with example Java code",
    "Category:Articles with example Python (programming language) code",
    "Category:Articles with short description",
    "Category:Short description is different from Wikidata",
    "Category:Software design patterns"
  ],
  "archived_date": "20241221_183039",
  "source_url": "https://en.wikipedia.org/wiki/Memento_pattern"
}