{
  "title": "Append",
  "summary": "In computer programming, append is the operation for concatenating linked lists or arrays in some high-level programming languages.",
  "content": "---\ntitle: Append\nurl: https://en.wikipedia.org/wiki/Append\nlanguage: en\ncategories: [\"Category:Articles with example Haskell code\", \"Category:Articles with example Perl code\", \"Category:Articles with example Python (programming language) code\", \"Category:Articles with example code\", \"Category:Articles with short description\", \"Category:CS1 errors: missing periodical\", \"Category:DOS on IBM PC compatibles\", \"Category:Functional programming\", \"Category:Lisp (programming language)\", \"Category:Programming constructs\", \"Category:Short description matches Wikidata\"]\nreferences: 0\nlast_modified: 2024-12-19T13:54:27Z\n---\n\n# Append\n\n## Summary\n\nIn computer programming, append is the operation for concatenating linked lists or arrays in some high-level programming languages.\n\n## Full Content\n\nIn computer programming, append is the operation for concatenating linked lists or arrays in some high-level programming languages.\n\nLisp\nAppend originates in the programming language Lisp. The append procedure takes zero or more (linked) lists as arguments, and returns the concatenation of these lists.\n\nSince the append procedure must completely copy all of its arguments except the last, both its time and space complexity are O(n) for a list of \n  \n    \n      \n        n\n      \n    \n    {\\displaystyle n}\n  \n elements.  It may thus be a source of inefficiency if used injudiciously in code.\nThe nconc procedure (called append! in Scheme) performs the same function as append, but destructively: it alters the cdr of each argument (save the last), pointing it to the next list.\n\nImplementation\nAppend can easily be defined recursively in terms of cons. The following is a simple implementation in Scheme, for two arguments only:\n\nAppend can also be implemented using fold-right:\n\nOther languages\nFollowing Lisp, other high-level programming languages which feature linked lists as primitive data structures have adopted an append. To append lists, as an operator, Haskell uses ++, OCaml uses @.\nOther languages use the + or ++ symbols to nondestructively concatenate a string, list, or array.\n\nProlog\nThe logic programming language Prolog features a built-in append predicate, which can be implemented as follows:\n\nThis predicate can be used for appending, but also for picking lists apart. Calling\n\nyields the solutions:\n\nL = [], R = [1, 2, 3] ;\nL = [1], R = [2, 3] ;\nL = [1, 2], R = [3] ;\nL = [1, 2, 3], R = []\n\nMiranda\nIn Miranda, this right-fold, from Hughes (1989:5-6), has the same semantics (by example) as the Scheme implementation above, for two arguments.\n\nappend a b = reduce cons b a\n\nWhere reduce is Miranda's name for fold, and cons constructs a list from two values or lists.\nFor example,\n\nappend [1,2] [3,4] = reduce cons [3,4] [1,2]\n    = (reduce cons [3,4]) (cons 1 (cons 2 nil))\n    = cons 1 (cons 2 [3,4]))\n        (replacing cons by cons and nil by [3,4])\n    = [1,2,3,4]\n\nHaskell\nIn Haskell, this right-fold has the same effect as the Scheme implementation above:\n\nThis is essentially a reimplementation of Haskell's ++ operator.\n\nPerl\nIn Perl, the push function is equivalent to the append method, and can be used in the following way.\n\nThe end result is a list containing [1, 2, 3]\nThe unshift function appends to the front of a list, rather than the end\n\nThe end result is a list containing [2, 3, 1]\nWhen opening a file, use the \">>\" mode to append rather than over write.\n\nNote that when opening and closing file handles, one should always check the return value.\n\nPython\nIn Python, use the list method extend or the infix operators + and += to append lists.\n\nDo not confuse with the list method append, which adds a single element to a list:\n\nBash\nIn Bash the append redirect is the usage of \">>\" for adding a stream to something, like in the following series of shell commands:\n\nThe stream \"Goodbye world!\" is added to the text file written in the first command. The \";\" implies the execution of the given commands in order, not simultaneously. So, the final content of the text file is:\n\nReferences\nHughes, John (1989). \"Why functional programming matters\" (PDF). Computer Journal. 32 (2): 98â€“107. doi:10.1093/comjnl/32.2.98. Archived from the original (PDF) on 2007-04-13.\nSteele, Guy L. Jr. (1990). \"Common Lisp: The Language\" (2nd ed.): 418. {{cite journal}}: Cite journal requires |journal= (help) Description of append.\n",
  "categories": [
    "Category:Articles with example Haskell code",
    "Category:Articles with example Perl code",
    "Category:Articles with example Python (programming language) code",
    "Category:Articles with example code",
    "Category:Articles with short description",
    "Category:CS1 errors: missing periodical",
    "Category:DOS on IBM PC compatibles",
    "Category:Functional programming",
    "Category:Lisp (programming language)",
    "Category:Programming constructs",
    "Category:Short description matches Wikidata"
  ],
  "archived_date": "20241221_183038",
  "source_url": "https://en.wikipedia.org/wiki/Append"
}