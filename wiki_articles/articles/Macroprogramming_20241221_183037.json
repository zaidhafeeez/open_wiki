{
  "title": "Macroprogramming",
  "summary": "In computer science, macroprogramming is a programming paradigm \naimed at expressing the macroscopic, global behaviour of an entire system of agents or computing devices.\nIn macroprogramming, the local programs for the individual components of a distributed system are compiled or interpreted from a macro-program typically expressed by a system-level perspective or in terms of the intended global goal.\nThe aim of macroprogramming approaches is to support expressing the macroscopic interactive beh",
  "content": "---\ntitle: Macroprogramming\nurl: https://en.wikipedia.org/wiki/Macroprogramming\nlanguage: en\ncategories: [\"Category:Articles with example Python (programming language) code\", \"Category:Articles with example Scala code\", \"Category:Articles with short description\", \"Category:Distributed computing\", \"Category:Programming languages\", \"Category:Programming paradigms\", \"Category:Short description with empty Wikidata description\"]\nreferences: 0\nlast_modified: 2024-12-19T15:05:18Z\n---\n\n# Macroprogramming\n\n## Summary\n\nIn computer science, macroprogramming is a programming paradigm \naimed at expressing the macroscopic, global behaviour of an entire system of agents or computing devices.\nIn macroprogramming, the local programs for the individual components of a distributed system are compiled or interpreted from a macro-program typically expressed by a system-level perspective or in terms of the intended global goal.\nThe aim of macroprogramming approaches is to support expressing the macroscopic interactive beh\n\n## Full Content\n\nIn computer science, macroprogramming is a programming paradigm \naimed at expressing the macroscopic, global behaviour of an entire system of agents or computing devices.\nIn macroprogramming, the local programs for the individual components of a distributed system are compiled or interpreted from a macro-program typically expressed by a system-level perspective or in terms of the intended global goal.\nThe aim of macroprogramming approaches is to support expressing the macroscopic interactive behaviour of a whole distributed system of computing devices or agents in a single program, or, similarly, to promote their collective intelligence.\nIt has not to be confused with macros, the mechanism often found in programming languages (like C or Scala) to express substitution rules for program pieces.\nMacroprogramming originated in the context of wireless sensor network programming\nand found renewed interest in the context of the Internet of Things and swarm robotics.\nMacroprogramming shares similar goals (related to  programming a system by a global perspective) with multitier programming, choreographic programming, and aggregate computing.\n\nContext and motivation\nProgramming distributed systems, multi-agent systems, and collectives of software agents (e.g., robotic swarms) is difficult, for many issues (like communication, concurrency, and failure) have to be properly considered. In particular, a general recurrent problem is how to induce the intended global behaviour by defining the behaviour of the individual components or agents involved. The problem can be addressed through learning approaches, such as multi-agent reinforcement learning, or by manually defining the control program driving each component. However, addressing the problem by a fully individual (or single-node) perspective may be error-prone, because it is generally difficult to foresee the overall behaviour emerging from complex networks of activities and interactions (cf. complex systems and emergence). Therefore, researchers have started investigated ways to raise the abstraction level, promoting programming of distributed systems by a more global perspective or in terms of the overall goal to be collectively attained.\n\nExamples\nScaFi\nThe following program in the ScaFi aggregate programming language  [1] defines the loop control logic needed to compute a channel (a Boolean field where the devices yielding true are those connecting, through a hop-by-hop path, a source device to a target device)  across a large set of situated devices interacting with neighbours.\n\nWhat is interesting to note is that the channel function, as well as the functions that are used to implement it, namely distanceTo, distanceBetween, dilate, broadcast etc.\ncan be interpreted not just in terms of the individual behaviour of a device, but rather by a macroscopic perspective.\nIn fact, for instance, distanceTo(s) is used to compute the field of minimum distances from the closest device for which expression s yields true: this is effectively a distributed data structure that is sustained through processing and communication with neighbours, in a self-organising way.\nSemantically, such functions define  a macro-level (or collective) behaviour that yields a macro-level (or collective) data structure. Such macro-level functions/behaviours can be composed together to obtain another more complex macro-level function/behaviours.\n\nRegiment\nThe following program in the Regiment language  can be used to compute the mean temperature perceived by the whole system:\n\nPyoT\nThe following program in PyoT  can be used to turn on a fan if the mean temperature computed by several sensors exceeds a certain threshold.\n\nTinyDB\nIn TinyDB, a data-oriented macroprogramming approach is used where the programmer writes a query which turns into single-node operations and routing in a wireless sensor network.\n\nSee also\nMultitier programming\nChoreographic programming\nAggregate computing\nDistributed computing\n\n\n== References ==\n",
  "categories": [
    "Category:Articles with example Python (programming language) code",
    "Category:Articles with example Scala code",
    "Category:Articles with short description",
    "Category:Distributed computing",
    "Category:Programming languages",
    "Category:Programming paradigms",
    "Category:Short description with empty Wikidata description"
  ],
  "archived_date": "20241221_183037",
  "source_url": "https://en.wikipedia.org/wiki/Macroprogramming"
}