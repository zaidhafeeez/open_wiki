{
  "title": "Doctest",
  "summary": "doctest is a module included in the Python programming language's standard library that allows the easy generation of tests based on output from the standard Python interpreter shell, cut and pasted into docstrings.",
  "content": "---\ntitle: Doctest\nurl: https://en.wikipedia.org/wiki/Doctest\nlanguage: en\ncategories: [\"Category:Articles with example Python (programming language) code\", \"Category:Articles with short description\", \"Category:Short description matches Wikidata\", \"Category:Software testing tools\", \"Category:Technical communication\"]\nreferences: 0\nlast_modified: 2024-12-19T13:52:44Z\n---\n\n# Doctest\n\n## Summary\n\ndoctest is a module included in the Python programming language's standard library that allows the easy generation of tests based on output from the standard Python interpreter shell, cut and pasted into docstrings.\n\n## Full Content\n\ndoctest is a module included in the Python programming language's standard library that allows the easy generation of tests based on output from the standard Python interpreter shell, cut and pasted into docstrings.\n\nImplementation specifics\nDoctest makes innovative use of the following Python capabilities:\n\ndocstrings\nThe Python interactive shell (both command line and the included idle application)\nPython introspection\nWhen using the Python shell, the primary prompt: >>> , is followed by new commands. The secondary prompt: ... , is used when continuing commands on multiple lines; and the result of executing the command is expected on following lines.\nA blank line, or another line starting with the primary prompt is seen as the end of the output from the command.\nThe doctest module looks for such sequences of prompts in a docstring, re-executes the extracted command and checks the output against the output of the command given in the docstrings test example.\nThe default action when running doctests is for no output to be shown when tests pass. This can be modified by options to the doctest runner. In addition, doctest has been integrated with the Python unit test module allowing doctests to be run as standard unittest testcases. Unittest testcase runners allow more options when running tests such as the reporting of test statistics such as tests passed, and failed.\n\nLiterate programming and doctests\nAlthough doctest does not allow a Python program to be embedded in narrative text, it does allow for verifiable examples to be embedded in docstrings, where the docstrings can contain other text. Docstrings can in turn be extracted from program files to generate documentation in other formats such as HTML or PDF. \nA program file can be made to contain the documentation, tests, as well as the code and the tests easily verified against the code. This allows code, tests, and documentation to evolve together.\n\nDocumenting libraries by example\nDoctests are well suited to provide an introduction to a library by demonstrating how the API is used.\nOn the basis of the output of Python's interactive interpreter, text can be mixed with tests that exercise the library, showing expected results.\n\nExamples\nExample one shows how narrative text can be interspersed with testable examples in a docstring. \nIn the second example, more features of doctest are shown, together with their explanation. \nExample three is set up to run all doctests in a file when the file is run, but when imported as a module, the tests will not be run.\n\nExample 1: A doctest embedded in the docstring of a function\nExample 2: doctests embedded in a README.txt file\nExample 3: unique_words.py\nThis example also simulates input to the function from a file by using the Python StringIO module\n\nDoctest and documentation generators\nBoth the EpyText format of Epydoc and Docutils' reStructuredText format support the markup of doctest sections within docstrings.\n\nImplementation in other programming languages\nIn C++, the doctest framework is the closest possible implementation of the concept – tests can be written directly in the production code with minimal overhead and the option to strip them from the binary.\nThe ExUnit.DocTest Elixir library implements functionality similar to Doctest.\nAn implementation of Doctest for Haskell.\nWriting documentation tests in Elm.\nWriting documentation tests in Rust.\nWriting documentation tests in Elixir.\nbyexample supports writing doctests for several popular programming languages (e.g. Python, Ruby, Shell, JavaScript, C/C++, Java, Go, Rust) inside Markdown, reStructuredText and other text documents.\n\nReferences\nExternal links\ndoctest — Test interactive Python examples\n",
  "categories": [
    "Category:Articles with example Python (programming language) code",
    "Category:Articles with short description",
    "Category:Short description matches Wikidata",
    "Category:Software testing tools",
    "Category:Technical communication"
  ],
  "archived_date": "20241220_214813",
  "source_url": "https://en.wikipedia.org/wiki/Doctest"
}