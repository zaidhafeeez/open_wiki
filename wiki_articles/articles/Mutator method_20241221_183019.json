{
  "title": "Mutator method",
  "summary": "In computer science, a mutator method is a method used to control changes to a variable. They are also widely known as setter methods. Often a setter is accompanied by a getter, which returns the value of the private member variable. They are also known collectively as accessors.\nThe mutator method is most often used in object-oriented programming, in keeping with the principle of encapsulation. According to this principle, member variables of a class are made private to hide and protect them fr",
  "content": "---\ntitle: Mutator method\nurl: https://en.wikipedia.org/wiki/Mutator_method\nlanguage: en\ncategories: [\"Category:Articles with example BASIC code\", \"Category:Articles with example C++ code\", \"Category:Articles with example C Sharp code\", \"Category:Articles with example Java code\", \"Category:Articles with example Lisp (programming language) code\", \"Category:Articles with example PHP code\", \"Category:Articles with example Pascal code\", \"Category:Articles with example Perl code\", \"Category:Articles with example Python (programming language) code\", \"Category:Articles with example Racket code\", \"Category:Articles with example Ruby code\", \"Category:Articles with example Smalltalk code\", \"Category:Articles with short description\", \"Category:Method (computer programming)\", \"Category:Short description is different from Wikidata\"]\nreferences: 0\nlast_modified: 2024-12-19T13:46:33Z\n---\n\n# Mutator method\n\n## Summary\n\nIn computer science, a mutator method is a method used to control changes to a variable. They are also widely known as setter methods. Often a setter is accompanied by a getter, which returns the value of the private member variable. They are also known collectively as accessors.\nThe mutator method is most often used in object-oriented programming, in keeping with the principle of encapsulation. According to this principle, member variables of a class are made private to hide and protect them fr\n\n## Full Content\n\nIn computer science, a mutator method is a method used to control changes to a variable. They are also widely known as setter methods. Often a setter is accompanied by a getter, which returns the value of the private member variable. They are also known collectively as accessors.\nThe mutator method is most often used in object-oriented programming, in keeping with the principle of encapsulation. According to this principle, member variables of a class are made private to hide and protect them from other code, and can only be modified by a public member function (the mutator method), which takes the desired new value as a parameter, optionally validates it, and modifies the private member variable. Mutator methods can be compared to assignment operator overloading but they typically appear at different levels of the object hierarchy.\nMutator methods may also be used in non-object-oriented environments. In this case, a reference to the variable to be modified is passed to the mutator, along with the new value. In this scenario, the compiler cannot restrict code from bypassing the mutator method and changing the variable directly. The responsibility falls to the developers to ensure the variable is only modified through the mutator method and not modified directly.\nIn programming languages that support them, properties offer a convenient alternative without giving up the utility of encapsulation.\nIn the examples below, a fully implemented mutator method can also validate the input data or take further action such as triggering an event.\n\nImplications\nThe alternative to defining mutator and accessor methods, or property blocks, is to give the instance variable some visibility other than private and access it directly from outside the objects. Much finer control of access rights can be defined using mutators and accessors. For example, a parameter may be made read-only simply by defining an accessor but not a mutator. The visibility of the two methods may be different; it is often useful for the accessor to be public while the mutator remains protected, package-private or internal.\nThe block where the mutator is defined provides an opportunity for validation or preprocessing of incoming data. If all external access is guaranteed to come through the mutator, then these steps cannot be bypassed. For example, if a date is represented by separate private year, month and day variables, then incoming dates can be split by the setDate mutator while for consistency the same private instance variables are accessed by setYear and setMonth. In all cases month values outside of 1 - 12 can be rejected by the same code.\nAccessors conversely allow for synthesis of useful data representations from internal variables while keeping their structure encapsulated and hidden from outside modules. A monetary getAmount accessor may build a string from a numeric variable with the number of decimal places defined by a hidden currency parameter.\nModern programming languages often offer the ability to generate the boilerplate for mutators and accessors in a single lineâ€”as for example C#'s public string Name { get; set; } and Ruby's attr_accessor :name. In these cases, no code blocks are created for validation, preprocessing or synthesis. These simplified accessors still retain the advantage of encapsulation over simple public instance variables, but it is common that, as system designs progress, the software is maintained and requirements change, the demands on the data become more sophisticated. Many automatic mutators and accessors eventually get replaced by separate blocks of code. The benefit of automatically creating them in the early days of the implementation is that the public interface of the class remains identical whether or not greater sophistication is added, requiring no extensive refactoring if it is. \nManipulation of parameters that have mutators and accessors from inside the class where they are defined often requires some additional thought. In the early days of an implementation, when there is little or no additional code in these blocks, it makes no difference if the private instance variable is accessed directly or not. As validation, cross-validation, data integrity checks, preprocessing or other sophistication is added, subtle bugs may appear where some internal access makes use of the newer code while in other places it is bypassed.\nAccessor functions can be less efficient than directly fetching or storing data fields due to the extra steps involved, however such functions are often inlined which eliminates the overhead of a function call.\n\nExamples\nAssembly\nC\nIn file student.h:\n\nIn file student.c:\n\nIn file main.c:\n\nIn file Makefile:\n\nC++\nIn file Student.h:\n\nIn file Student.cpp:\n\nC#\nThis example illustrates the C# idea of properties, which are a special type of class member. Unlike Java, no explicit methods are defined; a public 'property' contains the logic to handle the actions. Note use of the built-in (undeclared) variable value. \n\nIn later C# versions (.NET Framework 3.5 and above), this example may be abbreviated as follows, without declaring the private variable name.\n\nUsing the abbreviated syntax means that the underlying variable is no longer available from inside the class. As a result, the set portion of the property must be present for assignment. Access can be restricted with a set-specific access modifier.\n\nCommon Lisp\nIn Common Lisp Object System, slot specifications within class definitions may specify any of the :reader, :writer and :accessor options (even multiple times) to define reader methods, setter methods and accessor methods (a reader method and the respective setf method). Slots are always directly accessible through their names with the use of with-slots and slot-value, and the slot accessor options define specialized methods that use slot-value.\nCLOS itself has no notion of properties, although the MetaObject Protocol extension specifies means to access a slot's reader and writer function names, including the ones generated with the :accessor option.\nThe following example shows a definition of a student class using these slot options and direct slot access:\n\nD\nD supports a getter and setter function syntax. In version 2 of the language getter and setter class/struct methods should have the @property attribute.\n\nA Student instance can be used like this:\n\nDelphi\nThis is a simple class in Delphi language which illustrates the concept of public property for accessing a private field.\n\nJava\nIn this example of a simple class representing a student with only the name stored, one can see the variable name is private, i.e. only visible from the Student class, and the \"setter\" and \"getter\" are public, namely the \"getName()\" and \"setName(name)\" methods.\n\nJavaScript\nIn this example constructor-function Student is used to create objects representing a student with only the name stored.\n\nOr (using a deprecated way to define accessors in Web browsers):\n\nOr (using prototypes for inheritance and ES6 accessor syntax):\n\nOr (without using prototypes):\n\nOr (using defineProperty):\n\nActionScript 3.0\nObjective-C\nUsing traditional Objective-C 1.0 syntax, with manual reference counting as the one working on GNUstep on Ubuntu 12.04:\n\nUsing newer Objective-C 2.0 syntax as used in Mac OS X 10.6, iOS 4 and Xcode 3.2, generating the same code as described above:\n\nAnd starting with OS X 10.8 and iOS 6, while using Xcode 4.4 and up, syntax can be even simplified:\n\nPerl\nOr, using Class::Accessor\n\nOr, using the Moose Object System:\n\nPHP\nPHP defines the \"magic methods\" __getand__set for properties of objects.\nIn this example of a simple class representing a student with only the name stored, one can see the variable name is private, i.e. only visible from the Student class, and the \"setter\" and \"getter\" is public, namely the getName() and setName('name') methods.\n\nPython\nThis example uses a Python class with one variable, a getter, and a setter.\n\nRacket\nIn Racket, the object system is a way to organize code that comes in addition to modules and units.  As in the rest of the language, the object system has first-class values and lexical scope is used to control access to objects and methods.\n\nStruct definitions are an alternative way to define new types of values, with mutators being present when explicitly required:\n\nRuby\nIn Ruby, individual accessor and mutator methods may be defined, or the metaprogramming constructs attr_reader or attr_accessor may be used both to declare a private variable in a class and to provide either read-only or read-write public access to it respectively.\nDefining individual accessor and mutator methods creates space for pre-processing or validation of the data\n\nRead-only simple public access to implied @name variable\n\nRead-write simple public access to implied @name variable\n\nRust\nSmalltalk\nSwift\nVisual Basic .NET\nThis example illustrates the VB.NET idea of properties, which are used in classes. Similar to C#, there is an explicit use of the Get and Set methods. \n\nIn VB.NET 2010, Auto Implemented properties can be utilized to create a property without having to use the Get and Set syntax. Note that a hidden variable is created by the compiler, called _name, to correspond with the Property name. Using another variable within the class named _name would result in an error. Privileged access to the underlying variable is available from within the class.\n\nSee also\nProperty (programming)\nIndexer (programming)\nImmutable object\n\n\n== References ==\n",
  "categories": [
    "Category:Articles with example BASIC code",
    "Category:Articles with example C++ code",
    "Category:Articles with example C Sharp code",
    "Category:Articles with example Java code",
    "Category:Articles with example Lisp (programming language) code",
    "Category:Articles with example PHP code",
    "Category:Articles with example Pascal code",
    "Category:Articles with example Perl code",
    "Category:Articles with example Python (programming language) code",
    "Category:Articles with example Racket code",
    "Category:Articles with example Ruby code",
    "Category:Articles with example Smalltalk code",
    "Category:Articles with short description",
    "Category:Method (computer programming)",
    "Category:Short description is different from Wikidata"
  ],
  "archived_date": "20241221_183019",
  "source_url": "https://en.wikipedia.org/wiki/Mutator_method"
}