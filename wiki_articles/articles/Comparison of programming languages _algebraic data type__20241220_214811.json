{
  "title": "Comparison of programming languages (algebraic data type)",
  "summary": "This article compares the syntax for defining and instantiating an algebraic data type (ADT), sometimes also referred to as a tagged union, in various programming languages.",
  "content": "---\ntitle: Comparison of programming languages (algebraic data type)\nurl: https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(algebraic_data_type)\nlanguage: en\ncategories: [\"Category:All articles to be expanded\", \"Category:All articles with unsourced statements\", \"Category:Articles to be expanded from December 2021\", \"Category:Articles with example C++ code\", \"Category:Articles with example Haskell code\", \"Category:Articles with example JavaScript code\", \"Category:Articles with example Java code\", \"Category:Articles with example Julia code\", \"Category:Articles with example Lisp (programming language) code\", \"Category:Articles with example OCaml code\", \"Category:Articles with example Pascal code\", \"Category:Articles with example Python (programming language) code\", \"Category:Articles with example Rust code\", \"Category:Articles with example Scala code\", \"Category:Articles with example Swift code\", \"Category:Articles with unsourced statements from December 2021\", \"Category:Programming language comparisons\"]\nreferences: 0\nlast_modified: 2024-12-19T07:19:54Z\n---\n\n# Comparison of programming languages (algebraic data type)\n\n## Summary\n\nThis article compares the syntax for defining and instantiating an algebraic data type (ADT), sometimes also referred to as a tagged union, in various programming languages.\n\n## Full Content\n\nThis article compares the syntax for defining and instantiating an algebraic data type (ADT), sometimes also referred to as a tagged union, in various programming languages.\n\nExamples of algebraic data types\nATS\nIn ATS, an ADT may be defined with:\n\nAnd instantiated as:\n\nAdditionally in ATS dataviewtypes are the linear type version of ADTs for the purpose of providing in the setting of manual memory management with the convenience of pattern matching. An example program might look like:\n\nCeylon\nIn Ceylon, an ADT may be defined with:\n\nAnd instantiated as:\n\nClean\nIn Clean, an ADT may be defined with:\n\nAnd instantiated as:\n\nCoq\nIn Coq, an ADT may be defined with:\n\nAnd instantiated as:\n\nC++\nIn C++, an ADT may be defined with:\n\nAnd instantiated as:\n\nDart\nIn Dart, an ADT may be defined with:\n\nAnd instantiated as:\n\nElm\nIn Elm, an ADT may be defined with:\n\nAnd instantiated as:\n\nF#\nIn F#, an ADT may be defined with:\n\nAnd instantiated as:\n\nF*\nIn F*, an ADT may be defined with:\n\nAnd instantiated as:\n\nFree Pascal\nIn Free Pascal (in standard ISO Pascal mode), an ADT may be defined with variant records:\n\nAnd instantiated as:\n\nHaskell\nIn Haskell, an ADT may be defined with:\n\nAnd instantiated as:\n\nHaxe\nIn Haxe, an ADT may be defined with:\n\nAnd instantiated as:\n\nHope\nIn Hope, an ADT may be defined with:\n\nAnd instantiated as:\n\nIdris\nIn Idris, an ADT may be defined with:\n\nAnd instantiated as:\n\nJava\nIn Java, an ADT may be defined with:\n\nAnd instantiated as:\n\nJulia\nIn Julia, an ADT may be defined with:\n\nAnd instantiated as:\n\nKotlin\nIn Kotlin, an ADT may be defined with:\n\nAnd instantiated as:\n\nLimbo\nIn Limbo, an ADT may be defined with:\n\nAnd instantiated as:\n\nMercury\nIn Mercury, an ADT may be defined with:\n\nAnd instantiated as:\n\nMiranda\nIn Miranda, an ADT may be defined with:\n\nAnd instantiated as:\n\nNemerle\nIn Nemerle, an ADT may be defined with:\n\nAnd instantiated as:\n\nNim\nIn Nim, an ADT may be defined with:\n\nAnd instantiated as:\n\nOCaml\nIn OCaml, an ADT may be defined with:\n\nAnd instantiated as:\n\nOpa\nIn Opa, an ADT may be defined with:\n\nAnd instantiated as:\n\nOpenCog\nIn OpenCog, an ADT may be defined with:\n\nPureScript\nIn PureScript, an ADT may be defined with:\n\nAnd instantiated as:\n\nPython\nIn Python, an ADT may be defined with:\n\nAnd instantiated as:\n\nRacket\nIn Typed Racket, an ADT may be defined with:\n\nAnd instantiated as:\n\nReason\nReason\nIn Reason, an ADT may be defined with:\n\nAnd instantiated as:\n\nReScript\nIn ReScript, an ADT may be defined with:\n\nAnd instantiated as:\n\nRust\nIn Rust, an ADT may be defined with:\n\nAnd instantiated as:\n\nScala\nScala 2\nIn Scala 2, an ADT may be defined with:\n\nAnd instantiated as:\n\nScala 3\nIn Scala 3, an ADT may be defined with:\n\nAnd instantiated as:\n\nStandard ML\nIn Standard ML, an ADT may be defined with:\n\nAnd instantiated as:\n\nSwift\nIn Swift, an ADT may be defined with:\n\nAnd instantiated as:\n\nTypeScript\nIn TypeScript, an ADT may be defined with:\n\nAnd instantiated as:\n\nVisual Prolog\nIn Visual Prolog, an ADT may be defined with:\n\nAnd instantiated as:\n\nZig\n\nIn Zig, an ADT may be defined with:\n\nAnd instantiated as:\n\n\n== References ==\n",
  "categories": [
    "Category:All articles to be expanded",
    "Category:All articles with unsourced statements",
    "Category:Articles to be expanded from December 2021",
    "Category:Articles with example C++ code",
    "Category:Articles with example Haskell code",
    "Category:Articles with example JavaScript code",
    "Category:Articles with example Java code",
    "Category:Articles with example Julia code",
    "Category:Articles with example Lisp (programming language) code",
    "Category:Articles with example OCaml code",
    "Category:Articles with example Pascal code",
    "Category:Articles with example Python (programming language) code",
    "Category:Articles with example Rust code",
    "Category:Articles with example Scala code",
    "Category:Articles with example Swift code",
    "Category:Articles with unsourced statements from December 2021",
    "Category:Programming language comparisons"
  ],
  "archived_date": "20241220_214811",
  "source_url": "https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(algebraic_data_type)"
}